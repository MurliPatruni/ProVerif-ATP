% Refutation found. Thanks to Tanya!
% SZS status Theorem for WEP-secrecy
% SZS output start Proof for WEP-secrecy
46. ! [X0,X1] : constr_split(constr_concat(X0,X1)) = tuple_2(X0,X1) [input]
47. ! [X2,X3,X4,X5] : constr_concat(constr_xor(X2,X3),constr_xor(X4,X5)) = constr_xor(constr_concat(X2,X4),constr_concat(X3,X5)) [input]
48. ! [X6,X7] : constr_xor(constr_C(X6),constr_C(X7)) = constr_C(constr_xor(X6,X7)) [input]
49. ! [X8] : constr_ZERO = constr_xor(X8,X8) [input]
50. ! [X9] : constr_xor(X9,constr_ZERO) = X9 [input]
51. ! [X10,X11] : constr_xor(X10,X11) = constr_xor(X11,X10) [input]
52. ! [X12,X13,X14] : constr_xor(X12,constr_xor(X13,X14)) = constr_xor(constr_xor(X12,X13),X14) [input]
53. ! [X15,X16] : ((pred_attacker(X16) & pred_attacker(X15)) => pred_attacker(constr_xor(X15,X16))) [input]
55. ! [X17] : (pred_attacker(X17) => pred_attacker(constr_split(X17))) [input]
59. ! [X22,X23] : (pred_attacker(tuple_enc_oracle_out_2(X22,X23)) => pred_attacker(X23)) [input]
60. ! [X24] : (pred_attacker(X24) => pred_attacker(tuple_enc_oracle_in_1(X24))) [input]
63. pred_attacker(constr_ZERO) [input]
73. ! [X35,X36] : (pred_attacker(tuple_B_out_1(X35,X36)) => pred_attacker(X36)) [input]
75. ! [X39,X40] : (pred_attacker(tuple_2(X39,X40)) => pred_attacker(X39)) [input]
82. ! [X49] : (pred_attacker(tuple_enc_oracle_in_1(X49)) => pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_concat(X49,constr_C(X49)),constr_RC4(name_v,name_Kab))))) [input]
83. pred_attacker(tuple_B_out_1(name_v,constr_xor(constr_concat(name_objective,constr_C(name_objective)),constr_RC4(name_v,name_Kab)))) [input]
84. pred_attacker(name_objective) [input]
85. ~pred_attacker(name_objective) [negated conjecture 84]
86. ! [X0,X1,X2,X3] : constr_concat(constr_xor(X0,X1),constr_xor(X2,X3)) = constr_xor(constr_concat(X0,X2),constr_concat(X1,X3)) [rectify 47]
87. ! [X0,X1] : constr_xor(constr_C(X0),constr_C(X1)) = constr_C(constr_xor(X0,X1)) [rectify 48]
88. ! [X0] : constr_ZERO = constr_xor(X0,X0) [rectify 49]
89. ! [X0] : constr_xor(X0,constr_ZERO) = X0 [rectify 50]
90. ! [X0,X1] : constr_xor(X0,X1) = constr_xor(X1,X0) [rectify 51]
91. ! [X0,X1,X2] : constr_xor(X0,constr_xor(X1,X2)) = constr_xor(constr_xor(X0,X1),X2) [rectify 52]
92. ! [X0,X1] : ((pred_attacker(X1) & pred_attacker(X0)) => pred_attacker(constr_xor(X0,X1))) [rectify 53]
93. ! [X0] : (pred_attacker(X0) => pred_attacker(constr_split(X0))) [rectify 55]
96. ! [X0,X1] : (pred_attacker(tuple_enc_oracle_out_2(X0,X1)) => pred_attacker(X1)) [rectify 59]
97. ! [X0] : (pred_attacker(X0) => pred_attacker(tuple_enc_oracle_in_1(X0))) [rectify 60]
104. ! [X0,X1] : (pred_attacker(tuple_B_out_1(X0,X1)) => pred_attacker(X1)) [rectify 73]
106. ! [X0,X1] : (pred_attacker(tuple_2(X0,X1)) => pred_attacker(X0)) [rectify 75]
112. ! [X0] : (pred_attacker(tuple_enc_oracle_in_1(X0)) => pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_concat(X0,constr_C(X0)),constr_RC4(name_v,name_Kab))))) [rectify 82]
113. ~pred_attacker(name_objective) [flattening 85]
115. ! [X0,X1] : (pred_attacker(constr_xor(X0,X1)) | (~pred_attacker(X1) | ~pred_attacker(X0))) [ennf transformation 92]
116. ! [X0,X1] : (pred_attacker(constr_xor(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0)) [flattening 115]
117. ! [X0] : (pred_attacker(constr_split(X0)) | ~pred_attacker(X0)) [ennf transformation 93]
121. ! [X0,X1] : (pred_attacker(X1) | ~pred_attacker(tuple_enc_oracle_out_2(X0,X1))) [ennf transformation 96]
122. ! [X0] : (pred_attacker(tuple_enc_oracle_in_1(X0)) | ~pred_attacker(X0)) [ennf transformation 97]
132. ! [X0,X1] : (pred_attacker(X1) | ~pred_attacker(tuple_B_out_1(X0,X1))) [ennf transformation 104]
135. ! [X0,X1] : (pred_attacker(X0) | ~pred_attacker(tuple_2(X0,X1))) [ennf transformation 106]
141. ! [X0] : (pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_concat(X0,constr_C(X0)),constr_RC4(name_v,name_Kab)))) | ~pred_attacker(tuple_enc_oracle_in_1(X0))) [ennf transformation 112]
187. constr_split(constr_concat(X0,X1)) = tuple_2(X0,X1) (0:8) [cnf transformation 46]
188. constr_concat(constr_xor(X0,X1),constr_xor(X2,X3)) = constr_xor(constr_concat(X0,X2),constr_concat(X1,X3)) (0:15:1) [cnf transformation 86]
189. constr_xor(constr_C(X0),constr_C(X1)) = constr_C(constr_xor(X0,X1)) (0:10:1) [cnf transformation 87]
190. constr_ZERO = constr_xor(X0,X0) (0:5:1) [cnf transformation 88]
191. constr_xor(X0,constr_ZERO) = X0 (0:5:1) [cnf transformation 89]
192. constr_xor(X0,X1) = constr_xor(X1,X0) (0:7:1) [cnf transformation 90]
193. constr_xor(X0,constr_xor(X1,X2)) = constr_xor(constr_xor(X0,X1),X2) (0:11:1) [cnf transformation 91]
194. pred_attacker(constr_xor(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0) (0:8:1) [cnf transformation 116]
196. pred_attacker(constr_split(X0)) | ~pred_attacker(X0) (0:5:1) [cnf transformation 117]
200. ~pred_attacker(tuple_enc_oracle_out_2(X0,X1)) | pred_attacker(X1) (0:6:1) [cnf transformation 121]
201. pred_attacker(tuple_enc_oracle_in_1(X0)) | ~pred_attacker(X0) (0:5:1) [cnf transformation 122]
204. pred_attacker(constr_ZERO) (0:2:1) [cnf transformation 63]
214. ~pred_attacker(tuple_B_out_1(X0,X1)) | pred_attacker(X1) (0:6:1) [cnf transformation 132]
216. pred_attacker(X0) | ~pred_attacker(tuple_2(X0,X1)) (0:6) [cnf transformation 135]
222. pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_concat(X0,constr_C(X0)),constr_RC4(name_v,name_Kab)))) | ~pred_attacker(tuple_enc_oracle_in_1(X0)) (0:14) [cnf transformation 141]
223. pred_attacker(tuple_B_out_1(name_v,constr_xor(constr_concat(name_objective,constr_C(name_objective)),constr_RC4(name_v,name_Kab)))) (0:11) [cnf transformation 83]
224. ~pred_attacker(name_objective) (0:2:1) [cnf transformation 113]
226. ~pred_attacker(constr_split(constr_concat(X0,X1))) | pred_attacker(X0) (0:7:1) [definition unfolding 216,187]
228. pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_RC4(name_v,name_Kab),constr_concat(X0,constr_C(X0))))) | ~pred_attacker(tuple_enc_oracle_in_1(X0)) (0:14:1) [forward demodulation 222,192]
229. pred_attacker(tuple_B_out_1(name_v,constr_xor(constr_RC4(name_v,name_Kab),constr_concat(name_objective,constr_C(name_objective))))) (0:11:1) [forward demodulation 223,192]
231. constr_xor(constr_ZERO,X1) = X1 (1:5:1) [superposition 192,191, 191 into 192, unify on (0).2 in 191 and (0).1 in 192]
241. ~pred_attacker(constr_concat(X0,X1)) | pred_attacker(X0) (1:6:1) [resolution 226,196]
257. constr_ZERO = constr_C(constr_xor(X2,X2)) (1:6) [superposition 189,190, 190 into 189, unify on (0).2 in 190 and (0).1 in 189]
264. constr_ZERO = constr_C(constr_ZERO) (1:4:1) [forward demodulation 257,190]
266. constr_xor(constr_ZERO,X1) = constr_xor(X0,constr_xor(X0,X1)) (1:9) [superposition 193,190, 190 into 193, unify on (0).2 in 190 and (0).2.1 in 193]
282. constr_xor(X0,constr_xor(X0,X1)) = X1 (1:7:1) [forward demodulation 266,231]
290. pred_attacker(constr_xor(constr_RC4(name_v,name_Kab),constr_concat(name_objective,constr_C(name_objective)))) (1:9:1) [resolution 229,214]
294. pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_RC4(name_v,name_Kab),constr_concat(constr_ZERO,constr_ZERO)))) | ~pred_attacker(tuple_enc_oracle_in_1(constr_ZERO)) (2:13) [superposition 228,264, 264 into 228, unify on (0).2 in 264 and (0).1.2.2.2 in 228]
295. pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_concat(constr_ZERO,constr_ZERO),constr_RC4(name_v,name_Kab)))) | ~pred_attacker(tuple_enc_oracle_in_1(constr_ZERO)) (2:13) [forward demodulation 294,192]
300. 1 <=> ~pred_attacker(tuple_enc_oracle_in_1(constr_ZERO)) [avatar definition]
301. ~pred_attacker(tuple_enc_oracle_in_1(constr_ZERO)) <- {1} (2:3:1) [avatar component clause 300]
306. 2 <=> pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_concat(constr_ZERO,constr_ZERO),constr_RC4(name_v,name_Kab)))) [avatar definition]
307. pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_concat(constr_ZERO,constr_ZERO),constr_RC4(name_v,name_Kab)))) <- {2} (2:10) [avatar component clause 306]
308. ~1 | 2 [avatar split clause 295,306,300]
309. ~pred_attacker(constr_ZERO) <- {1} (3:2) [resolution 301,201]
310. $false <- {1} (3:0) [subsumption resolution 309,204]
311. 1 [avatar contradiction clause 310]
312. constr_ZERO = constr_concat(constr_xor(X4,X4),constr_xor(X5,X5)) (1:9) [superposition 188,190, 190 into 188, unify on (0).2 in 190 and (0).2 in 188]
320. constr_ZERO = constr_concat(constr_xor(X4,X4),constr_ZERO) (1:7) [forward demodulation 312,190]
321. constr_ZERO = constr_concat(constr_ZERO,constr_ZERO) (1:5:1) [forward demodulation 320,190]
322. pred_attacker(tuple_enc_oracle_out_2(name_v,constr_xor(constr_ZERO,constr_RC4(name_v,name_Kab)))) <- {2} (2:8) [backward demodulation 321,307]
323. pred_attacker(tuple_enc_oracle_out_2(name_v,constr_RC4(name_v,name_Kab))) <- {2} (2:6:1) [forward demodulation 322,231]
341. pred_attacker(constr_RC4(name_v,name_Kab)) <- {2} (3:4:1) [resolution 323,200]
354. ~pred_attacker(constr_xor(X3,X4)) | pred_attacker(X4) | ~pred_attacker(X3) (2:8:1) [superposition 194,282, 282 into 194, unify on (0).2 in 282 and (0).1 in 194]
524. pred_attacker(constr_concat(name_objective,constr_C(name_objective))) | ~pred_attacker(constr_RC4(name_v,name_Kab)) (3:9) [resolution 354,290]
541. pred_attacker(constr_concat(name_objective,constr_C(name_objective))) <- {2} (3:5:1) [subsumption resolution 524,341]
683. pred_attacker(name_objective) <- {2} (4:2) [resolution 541,241]
684. $false <- {2} (4:0) [subsumption resolution 683,224]
685. ~2 [avatar contradiction clause 684]
686. $false (0:0) [avatar sat refutation 308,311,685]
% SZS output end Proof for WEP-secrecy
