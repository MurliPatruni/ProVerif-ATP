free c : channel.
free objective : bitstring [private].

fun exp(bitstring, bitstring) : bitstring.
fun mod(bitstring, bitstring) : bitstring.

equation
  forall P : bitstring, G : bitstring, x : bitstring, y : bitstring; 
    mod(exp(exp(G, x), y), P) = mod(exp(exp(G, y), x), P).

fun enc(bitstring, bitstring) : bitstring.
fun dec(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    dec(enc(m, k), k) = m.

query 
  attacker(objective).

let A =
  new P : bitstring;
  new G : bitstring;
  new Na : bitstring;
  out(c, (P, G));
  out(c, mod(exp(G, Na), P));
  in(c, B : bitstring);
  let s = mod(exp(B, Na), P) in
  out(c, enc(objective, s));
  0.

let B =
  new Nb : bitstring;
  in(c, (P : bitstring, G : bitstring));
  in(c, A : bitstring);
  out(c, mod(exp(G, Nb), P));
  let s = mod(exp(A, Nb), P) in
  0.

process
  (
    A
  )
  | (
    B
  )