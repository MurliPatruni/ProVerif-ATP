const CONST_0 : bitstring.
const CONST_1 : bitstring.
const CONST_2 : bitstring.
const CONST_3 : bitstring.
const CONST_4 : bitstring.

pred eq(bitstring, bitstring).

clauses
  forall x : bitstring;
    eq(x, x).

fun tuple_2_get_0(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_0((x0, x1)) = x0.

fun tuple_2_get_1(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_1((x0, x1)) = x1.

free c : channel.

const A : bitstring.

free E : bitstring.

fun test(bitstring) : bitstring.

table keys(bitstring, bitstring).

fun pkey(bitstring) : bitstring.
fun xor(bitstring, bitstring) : bitstring.

equation
  forall x : bitstring; 
    xor(A, x) = x.

fun sign(bitstring, bitstring) : bitstring.
fun getmess(bitstring) : bitstring.
fun checksign(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    checksign(sign(m, k), pkey(k)) = m;
  forall m : bitstring, k : bitstring; 
    checksign(sign(m, k), pkey(k)) = m.
equation
  forall m : bitstring, k : bitstring; 
    getmess(sign(m, k)) = m.

fun dec(bitstring, bitstring) : bitstring.
fun enc(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    dec(enc(m, k), k) = m.

fun aenc(bitstring, bitstring) : bitstring.
fun adec(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    adec(aenc(m, pkey(k)), k) = m.

free objective : bitstring [private].

query 
  attacker(objective).

const client_A_STEP_1 : bitstring.
const client_A_STEP_2 : bitstring.

let client_A(skA : bitstring, pkS : bitstring) =
  let pkA = pkey(skA) in
  in(c, T : bitstring);
  out(c, ((A, T), client_A_STEP_1));
  in(c, sign_pkT_T : bitstring);
  let pkT : bitstring = tuple_2_get_0(checksign(sign_pkT_T, pkS)) in
  
  if eq(tuple_2_get_1(checksign(sign_pkT_T, pkS)), T) then
  out(c, (aenc(objective, pkT), client_A_STEP_2));
  0.

const key_retrieval_server_STEP_1 : bitstring.

let key_retrieval_server(skS : bitstring) =
  in(c, (src : bitstring, dst : bitstring));
  get keys(=dst, pkDst) in
  out(c, (sign((pkDst, dst), skS), key_retrieval_server_STEP_1));
  0.

let key_register_server =
  in(c, (h : bitstring, pkH : bitstring));
  
  if h <> A then
  insert keys(h, pkH);
  0.

const STEP_1 : bitstring.

process
  new skS : bitstring;
  new skA : bitstring;
  let pkS = pkey(skS) in
  let pkA = pkey(skA) in
  insert keys(A, pkA);
  out(c, (pkS, STEP_1));
  (
    ! (
      client_A(skA, pkS)
    )
  )
  | (
    (
      ! (
        key_retrieval_server(skS)
      )
    )
    | (
      ! (
        key_register_server
      )
    )
  )