% Refutation found. Thanks to Tanya!
% SZS status Theorem for Shamir-Rivest-Adleman-Three-Pass
% SZS output start Proof for Shamir-Rivest-Adleman-Three-Pass
46. ! [X0,X1] : constr_dec(constr_enc(X1,X0),X0) = X1 [input]
47. ! [X2,X3] : constr_comm_dec(constr_comm_enc(X3,X2),X2) = X3 [input]
51. ! [X6,X7] : ((pred_attacker(X7) & pred_attacker(X6)) => pred_attacker(constr_dec(X6,X7))) [input]
58. pred_attacker(constr_CONST_0x30) [input]
66. ! [X19] : (pred_attacker(tuple_A_out_4(X19)) => pred_attacker(X19)) [input]
68. ! [X21] : (pred_attacker(tuple_A_out_3(X21)) => pred_attacker(X21)) [input]
70. ! [X23] : (pred_attacker(tuple_A_out_1(X23)) => pred_attacker(X23)) [input]
71. ! [X24] : (pred_attacker(X24) => pred_attacker(tuple_A_in_2(X24))) [input]
78. pred_attacker(tuple_A_out_1(constr_comm_enc(name_m_9,name_Ka))) [input]
79. ! [X32] : (pred_attacker(tuple_A_in_2(X32)) => pred_attacker(tuple_A_out_3(constr_comm_dec(X32,name_Ka)))) [input]
80. ! [X33] : (pred_attacker(tuple_A_in_2(X33)) => pred_attacker(tuple_A_out_4(constr_enc(name_objective,name_m_9)))) [input]
82. pred_attacker(name_objective) [input]
83. ~pred_attacker(name_objective) [negated conjecture 82]
84. ! [X0,X1] : constr_comm_dec(constr_comm_enc(X1,X0),X0) = X1 [rectify 47]
86. ! [X0,X1] : ((pred_attacker(X1) & pred_attacker(X0)) => pred_attacker(constr_dec(X0,X1))) [rectify 51]
96. ! [X0] : (pred_attacker(tuple_A_out_4(X0)) => pred_attacker(X0)) [rectify 66]
98. ! [X0] : (pred_attacker(tuple_A_out_3(X0)) => pred_attacker(X0)) [rectify 68]
100. ! [X0] : (pred_attacker(tuple_A_out_1(X0)) => pred_attacker(X0)) [rectify 70]
101. ! [X0] : (pred_attacker(X0) => pred_attacker(tuple_A_in_2(X0))) [rectify 71]
107. ! [X0] : (pred_attacker(tuple_A_in_2(X0)) => pred_attacker(tuple_A_out_3(constr_comm_dec(X0,name_Ka)))) [rectify 79]
108. ! [X0] : (pred_attacker(tuple_A_in_2(X0)) => pred_attacker(tuple_A_out_4(constr_enc(name_objective,name_m_9)))) [rectify 80]
110. ~pred_attacker(name_objective) [flattening 83]
114. ! [X0,X1] : (pred_attacker(constr_dec(X0,X1)) | (~pred_attacker(X1) | ~pred_attacker(X0))) [ennf transformation 86]
115. ! [X0,X1] : (pred_attacker(constr_dec(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0)) [flattening 114]
127. ! [X0] : (pred_attacker(X0) | ~pred_attacker(tuple_A_out_4(X0))) [ennf transformation 96]
129. ! [X0] : (pred_attacker(X0) | ~pred_attacker(tuple_A_out_3(X0))) [ennf transformation 98]
131. ! [X0] : (pred_attacker(X0) | ~pred_attacker(tuple_A_out_1(X0))) [ennf transformation 100]
132. ! [X0] : (pred_attacker(tuple_A_in_2(X0)) | ~pred_attacker(X0)) [ennf transformation 101]
138. ! [X0] : (pred_attacker(tuple_A_out_3(constr_comm_dec(X0,name_Ka))) | ~pred_attacker(tuple_A_in_2(X0))) [ennf transformation 107]
139. ! [X0] : (pred_attacker(tuple_A_out_4(constr_enc(name_objective,name_m_9))) | ~pred_attacker(tuple_A_in_2(X0))) [ennf transformation 108]
186. constr_dec(constr_enc(X1,X0),X0) = X1 (0:7:1) [cnf transformation 46]
187. constr_comm_dec(constr_comm_enc(X1,X0),X0) = X1 (0:7:1) [cnf transformation 84]
191. pred_attacker(constr_dec(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0) (0:8:1) [cnf transformation 115]
198. pred_attacker(constr_CONST_0x30) (0:2:1) [cnf transformation 58]
206. ~pred_attacker(tuple_A_out_4(X0)) | pred_attacker(X0) (0:5:1) [cnf transformation 127]
208. ~pred_attacker(tuple_A_out_3(X0)) | pred_attacker(X0) (0:5:1) [cnf transformation 129]
210. ~pred_attacker(tuple_A_out_1(X0)) | pred_attacker(X0) (0:5:1) [cnf transformation 131]
211. pred_attacker(tuple_A_in_2(X0)) | ~pred_attacker(X0) (0:5:1) [cnf transformation 132]
217. pred_attacker(tuple_A_out_1(constr_comm_enc(name_m_9,name_Ka))) (0:5:1) [cnf transformation 78]
218. pred_attacker(tuple_A_out_3(constr_comm_dec(X0,name_Ka))) | ~pred_attacker(tuple_A_in_2(X0)) (0:8:1) [cnf transformation 138]
219. pred_attacker(tuple_A_out_4(constr_enc(name_objective,name_m_9))) | ~pred_attacker(tuple_A_in_2(X0)) (0:8) [cnf transformation 139]
221. ~pred_attacker(name_objective) (0:2:1) [cnf transformation 110]
223. 0 <=> ! [X0] : ~pred_attacker(tuple_A_in_2(X0)) [avatar definition]
224. ~pred_attacker(tuple_A_in_2(X0)) <- {0} (0:3:1) [avatar component clause 223]
229. 2 <=> pred_attacker(tuple_A_out_4(constr_enc(name_objective,name_m_9))) [avatar definition]
230. pred_attacker(tuple_A_out_4(constr_enc(name_objective,name_m_9))) <- {2} (0:5:1) [avatar component clause 229]
231. 0 | 2 [avatar split clause 219,229,223]
239. pred_attacker(constr_comm_enc(name_m_9,name_Ka)) (1:4:1) [resolution 217,210]
240. pred_attacker(constr_enc(name_objective,name_m_9)) <- {2} (1:4:1) [resolution 230,206]
243. ~pred_attacker(constr_enc(X0,X1)) | ~pred_attacker(X1) | pred_attacker(X0) (1:8:1) [superposition 191,186, 186 into 191, unify on (0).2 in 186 and (0).1 in 191]
246. ~pred_attacker(tuple_A_in_2(constr_comm_enc(X0,name_Ka))) | pred_attacker(tuple_A_out_3(X0)) (1:8:1) [superposition 218,187, 187 into 218, unify on (0).2 in 187 and (0).1.1 in 218]
249. ~pred_attacker(name_m_9) | pred_attacker(name_objective) <- {2} (2:4) [resolution 243,240]
252. ~pred_attacker(name_m_9) <- {2} (2:2:1) [subsumption resolution 249,221]
258. ~pred_attacker(constr_comm_enc(X0,name_Ka)) | pred_attacker(tuple_A_out_3(X0)) (2:7:1) [resolution 246,211]
260. pred_attacker(tuple_A_out_3(name_m_9)) (3:3:1) [resolution 258,239]
262. pred_attacker(name_m_9) (4:2) [resolution 260,208]
263. $false <- {2} (4:0) [subsumption resolution 262,252]
264. ~2 [avatar contradiction clause 263]
265. ~pred_attacker(X0) <- {0} (1:2:1) [resolution 224,211]
266. $false <- {0} (2:0) [resolution 265,198]
304. ~0 [avatar contradiction clause 266]
305. $false (0:0) [avatar sat refutation 231,264,304]
% SZS output end Proof for Shamir-Rivest-Adleman-Three-Pass
