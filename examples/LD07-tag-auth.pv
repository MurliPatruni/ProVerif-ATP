free c : channel.

free objective : bitstring [private].

free k0 : bitstring [private].
free ki : bitstring [private].

fun xor(bitstring, bitstring) : bitstring.

const ZERO:bitstring.

(* associativity *)
equation forall x:bitstring, y:bitstring, z:bitstring; xor(x, xor(y, z)) = xor(xor(x, y), z).

(* commutativity *)
equation forall x:bitstring, y:bitstring; xor(x, y) = xor(y, x).

(* neutral element *)
equation forall x:bitstring; xor(x, ZERO) = x.

(* nilpotence *)
equation forall x:bitstring; xor(x, x) = ZERO.

fun h(bitstring) : bitstring.

query attacker(objective).

let T =
  let alpha = xor(k0, ki) in
  in(c, r : bitstring);
  out(c, h(xor(r, alpha)));
  in(c, (a : bitstring, b : bitstring));
  if b = h(xor(a, alpha)) then (
    let alpha_prime = xor(alpha, a) in
    out(c, objective)
  ).

process T
