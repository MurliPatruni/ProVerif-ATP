const CONST_0 : bitstring.
const CONST_1 : bitstring.
const CONST_2 : bitstring.
const CONST_3 : bitstring.
const CONST_4 : bitstring.

free c : channel.
free A : bitstring.
free B : bitstring.
free S : bitstring.

const ZERO : bitstring.

fun xor(bitstring, bitstring) : bitstring.

equation
  forall x : bitstring, y : bitstring, z : bitstring; 
    xor(x, xor(y, z)) = xor(xor(x, y), z).
equation
  forall x : bitstring, y : bitstring; 
    xor(x, y) = xor(y, x).
equation
  forall x : bitstring; 
    xor(x, ZERO) = x.
equation
  forall x : bitstring; 
    xor(x, x) = ZERO.

fun pkey(bitstring) : bitstring.
fun pk_enc(bitstring, bitstring) : bitstring.
fun pk_dec(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    pk_dec(pk_enc(m, pkey(k)), k) = m.

fun enc(bitstring, bitstring) : bitstring.
fun dec(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    dec(enc(m, k), k) = m.

fun mul(bitstring, bitstring) : bitstring.

equation
  forall x : bitstring, y : bitstring, k : bitstring; 
    mul(pk_enc(x, k), pk_enc(y, k)) = pk_enc(mul(x, y), k).

fun div1(bitstring, bitstring) : bitstring.
fun div2(bitstring, bitstring) : bitstring.

equation
  forall x : bitstring, y : bitstring; 
    div1(mul(x, y), y) = x.
equation
  forall x : bitstring, y : bitstring; 
    div2(mul(x, y), x) = y.

free objective : bitstring [private].

query 
  attacker(objective).

fun session_i_out_1(bitstring, bitstring) : bitstring [data].
fun session_i_out_2(bitstring) : bitstring [data].
fun session_i_out_3(bitstring, bitstring) : bitstring [data].
fun session_i_out_4(bitstring, bitstring) : bitstring [data].
fun session_i_out_5(bitstring) : bitstring [data].

let session_i(pkS : bitstring) =
  new Ka : bitstring;
  new Kb : bitstring;
  out(c, session_i_out_1(B, pk_enc(Ka, pkS)));
  out(c, session_i_out_2(A));
  out(c, session_i_out_3(A, pk_enc(Kb, pkS)));
  out(c, session_i_out_4(B, xor(Kb, Ka)));
  out(c, session_i_out_5(enc(objective, Kb)));
  0.

fun server_S_in_1(bitstring, bitstring) : bitstring [data].
fun server_S_out_1(bitstring) : bitstring [data].
fun server_S_in_2(bitstring, bitstring) : bitstring [data].
fun server_S_out_2(bitstring) : bitstring [data].

let server_S(skS : bitstring, pkS : bitstring) =
  in(c, server_S_in_1(=B, enc_Ka_pkS : bitstring));
  let Ka = pk_dec(enc_Ka_pkS, skS) in
  out(c, server_S_out_1(A));
  in(c, server_S_in_2(=A, enc_Kb_pkS : bitstring));
  let Kb = pk_dec(enc_Kb_pkS, skS) in
  out(c, server_S_out_2(xor(Kb, Ka)));
  0.

process
  new skS : bitstring;
  let pkS = pkey(skS) in
  (
    session_i(pkS)
  )
  | (
    server_S(skS, pkS)
  )