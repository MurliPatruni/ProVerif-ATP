const CONST_0 : bitstring.
const CONST_1 : bitstring.
const CONST_2 : bitstring.
const CONST_3 : bitstring.
const CONST_4 : bitstring.

free c : channel.

const ZERO : bitstring.

free k : bitstring [private].

fun h(bitstring) : bitstring.
fun xor(bitstring, bitstring) : bitstring.

equation
  forall x : bitstring, y : bitstring, z : bitstring; 
    xor(x, xor(y, z)) = xor(xor(x, y), z).
equation
  forall x : bitstring, y : bitstring; 
    xor(x, y) = xor(y, x).
equation
  forall x : bitstring; 
    xor(x, ZERO) = x.
equation
  forall x : bitstring; 
    xor(x, x) = ZERO.

free objective_R : bitstring [private].

query 
  attacker(objective_R).

fun R_out_1(bitstring) : bitstring [data].
fun R_in_1(bitstring, bitstring) : bitstring [data].
fun R_out_2(bitstring) : bitstring [data].
fun R_out_3(bitstring) : bitstring [data].

let R =
  new r0 : bitstring;
  out(c, R_out_1(r0));
  in(c, R_in_1(r1_in : bitstring, h_res : bitstring));
  
  if h_res = h(xor(xor(r0, r1_in), k)) then
  out(c, R_out_2(h(xor(xor(h_res, k), r0))));
  out(c, R_out_3(objective_R));
  0.

fun knowledge_from_1st_round_out_1(bitstring) : bitstring [data].
fun knowledge_from_1st_round_out_2(bitstring, bitstring) : bitstring [data].
fun knowledge_from_1st_round_out_3(bitstring) : bitstring [data].

let knowledge_from_1st_round =
  new r0_from_1st : bitstring;
  new r1_from_1st : bitstring;
  out(c, knowledge_from_1st_round_out_1(r0_from_1st));
  let h_res = h(xor(xor(r0_from_1st, r1_from_1st), k)) in
  out(c, knowledge_from_1st_round_out_2(r1_from_1st, h_res));
  out(c, knowledge_from_1st_round_out_3(h(xor(xor(h_res, k), r0_from_1st))));
  0.

process
  (
    knowledge_from_1st_round
  )
  | (
    R
  )