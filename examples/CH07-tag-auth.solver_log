% Refutation found. Thanks to Tanya!
% SZS status Theorem for CH07-tag-auth
% SZS output start Proof for CH07-tag-auth
92. ! [X0] : constr_ZERO = constr_xor(X0,X0) [input]
93. ! [X1] : constr_xor(X1,constr_ZERO) = X1 [input]
94. ! [X2,X3] : constr_xor(X2,X3) = constr_xor(X3,X2) [input]
95. ! [X4,X5,X6] : constr_xor(X4,constr_xor(X5,X6)) = constr_xor(constr_xor(X4,X5),X6) [input]
96. ! [X7,X8] : ((pred_attacker(X8) & pred_attacker(X7)) => pred_attacker(constr_xor(X7,X8))) [input]
103. ! [X15,X16] : (pred_attacker(tuple_sess_1_out_2(X15,X16)) => pred_attacker(X15)) [input]
104. ! [X17,X18] : (pred_attacker(tuple_sess_1_out_2(X17,X18)) => pred_attacker(X18)) [input]
106. ! [X20] : (pred_attacker(tuple_sess_1_out_1(X20)) => pred_attacker(X20)) [input]
112. ! [X25] : (pred_attacker(tuple_R_out_4(X25)) => pred_attacker(X25)) [input]
117. ! [X32,X33] : (pred_attacker(tuple_R_out_1(X32,X33)) => pred_attacker(X33)) [input]
118. ! [X34,X35] : ((pred_attacker(X35) & pred_attacker(X34)) => pred_attacker(tuple_R_in_2(X34,X35))) [input]
132. pred_attacker(tuple_sess_1_out_1(name_r1_s1)) [input]
133. pred_attacker(tuple_sess_1_out_2(name_r2_s1,constr_split_L(constr_xor(constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1_s1,name_r2_s1),name_k))),constr_h(constr_xor(constr_xor(name_r1_s1,name_r2_s1),name_k)))))) [input]
135. pred_attacker(tuple_R_out_1(constr_QUERY,name_r1)) [input]
137. ! [X47] : (pred_attacker(tuple_R_in_2(X47,constr_split_L(constr_xor(constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1,X47),name_k))),constr_h(constr_xor(constr_xor(name_r1,X47),name_k)))))) => pred_attacker(tuple_R_out_4(name_objective))) [input]
138. pred_attacker(name_objective) [input]
139. ~pred_attacker(name_objective) [negated conjecture 138]
140. ! [X0] : constr_xor(X0,constr_ZERO) = X0 [rectify 93]
141. ! [X0,X1] : constr_xor(X0,X1) = constr_xor(X1,X0) [rectify 94]
142. ! [X0,X1,X2] : constr_xor(X0,constr_xor(X1,X2)) = constr_xor(constr_xor(X0,X1),X2) [rectify 95]
143. ! [X0,X1] : ((pred_attacker(X1) & pred_attacker(X0)) => pred_attacker(constr_xor(X0,X1))) [rectify 96]
149. ! [X0,X1] : (pred_attacker(tuple_sess_1_out_2(X0,X1)) => pred_attacker(X0)) [rectify 103]
150. ! [X0,X1] : (pred_attacker(tuple_sess_1_out_2(X0,X1)) => pred_attacker(X1)) [rectify 104]
152. ! [X0] : (pred_attacker(tuple_sess_1_out_1(X0)) => pred_attacker(X0)) [rectify 106]
156. ! [X0] : (pred_attacker(tuple_R_out_4(X0)) => pred_attacker(X0)) [rectify 112]
161. ! [X0,X1] : (pred_attacker(tuple_R_out_1(X0,X1)) => pred_attacker(X1)) [rectify 117]
162. ! [X0,X1] : ((pred_attacker(X1) & pred_attacker(X0)) => pred_attacker(tuple_R_in_2(X0,X1))) [rectify 118]
170. ! [X0] : (pred_attacker(tuple_R_in_2(X0,constr_split_L(constr_xor(constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1,X0),name_k))),constr_h(constr_xor(constr_xor(name_r1,X0),name_k)))))) => pred_attacker(tuple_R_out_4(name_objective))) [rectify 137]
171. ~pred_attacker(name_objective) [flattening 139]
173. ! [X0,X1] : (pred_attacker(constr_xor(X0,X1)) | (~pred_attacker(X1) | ~pred_attacker(X0))) [ennf transformation 143]
174. ! [X0,X1] : (pred_attacker(constr_xor(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0)) [flattening 173]
181. ! [X0,X1] : (pred_attacker(X0) | ~pred_attacker(tuple_sess_1_out_2(X0,X1))) [ennf transformation 149]
182. ! [X0,X1] : (pred_attacker(X1) | ~pred_attacker(tuple_sess_1_out_2(X0,X1))) [ennf transformation 150]
184. ! [X0] : (pred_attacker(X0) | ~pred_attacker(tuple_sess_1_out_1(X0))) [ennf transformation 152]
189. ! [X0] : (pred_attacker(X0) | ~pred_attacker(tuple_R_out_4(X0))) [ennf transformation 156]
195. ! [X0,X1] : (pred_attacker(X1) | ~pred_attacker(tuple_R_out_1(X0,X1))) [ennf transformation 161]
196. ! [X0,X1] : (pred_attacker(tuple_R_in_2(X0,X1)) | (~pred_attacker(X1) | ~pred_attacker(X0))) [ennf transformation 162]
197. ! [X0,X1] : (pred_attacker(tuple_R_in_2(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0)) [flattening 196]
205. ! [X0] : (pred_attacker(tuple_R_out_4(name_objective)) | ~pred_attacker(tuple_R_in_2(X0,constr_split_L(constr_xor(constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1,X0),name_k))),constr_h(constr_xor(constr_xor(name_r1,X0),name_k))))))) [ennf transformation 170]
297. constr_ZERO = constr_xor(X0,X0) (0:5:1) [cnf transformation 92]
298. constr_xor(X0,constr_ZERO) = X0 (0:5:1) [cnf transformation 140]
299. constr_xor(X0,X1) = constr_xor(X1,X0) (0:7:1) [cnf transformation 141]
300. constr_xor(X0,constr_xor(X1,X2)) = constr_xor(constr_xor(X0,X1),X2) (0:11:1) [cnf transformation 142]
301. pred_attacker(constr_xor(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0) (0:8:1) [cnf transformation 174]
308. ~pred_attacker(tuple_sess_1_out_2(X0,X1)) | pred_attacker(X0) (0:6:1) [cnf transformation 181]
309. ~pred_attacker(tuple_sess_1_out_2(X0,X1)) | pred_attacker(X1) (0:6:1) [cnf transformation 182]
311. ~pred_attacker(tuple_sess_1_out_1(X0)) | pred_attacker(X0) (0:5:1) [cnf transformation 184]
317. ~pred_attacker(tuple_R_out_4(X0)) | pred_attacker(X0) (0:5:1) [cnf transformation 189]
322. ~pred_attacker(tuple_R_out_1(X0,X1)) | pred_attacker(X1) (0:6:1) [cnf transformation 195]
323. pred_attacker(tuple_R_in_2(X0,X1)) | ~pred_attacker(X1) | ~pred_attacker(X0) (0:8:1) [cnf transformation 197]
336. pred_attacker(tuple_sess_1_out_1(name_r1_s1)) (0:3:1) [cnf transformation 132]
337. pred_attacker(tuple_sess_1_out_2(name_r2_s1,constr_split_L(constr_xor(constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1_s1,name_r2_s1),name_k))),constr_h(constr_xor(constr_xor(name_r1_s1,name_r2_s1),name_k)))))) (0:19) [cnf transformation 133]
339. pred_attacker(tuple_R_out_1(constr_QUERY,name_r1)) (0:4:1) [cnf transformation 135]
341. pred_attacker(tuple_R_out_4(name_objective)) | ~pred_attacker(tuple_R_in_2(X0,constr_split_L(constr_xor(constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1,X0),name_k))),constr_h(constr_xor(constr_xor(name_r1,X0),name_k)))))) (0:22) [cnf transformation 205]
342. ~pred_attacker(name_objective) (0:2:1) [cnf transformation 171]
343. pred_attacker(tuple_sess_1_out_2(name_r2_s1,constr_split_L(constr_xor(constr_h(constr_xor(constr_xor(name_r1_s1,name_r2_s1),name_k)),constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1_s1,name_r2_s1),name_k))))))) (0:19) [forward demodulation 337,299]
344. pred_attacker(tuple_sess_1_out_2(name_r2_s1,constr_split_L(constr_xor(constr_h(constr_xor(name_k,constr_xor(name_r1_s1,name_r2_s1))),constr_rotate(name_ID,constr_h(constr_xor(name_k,constr_xor(name_r1_s1,name_r2_s1)))))))) (0:19:1) [forward demodulation 343,299]
351. ~pred_attacker(tuple_R_in_2(X0,constr_split_L(constr_xor(constr_h(constr_xor(constr_xor(name_r1,X0),name_k)),constr_rotate(name_ID,constr_h(constr_xor(constr_xor(name_r1,X0),name_k))))))) | pred_attacker(tuple_R_out_4(name_objective)) (0:22) [forward demodulation 341,299]
352. ~pred_attacker(tuple_R_in_2(X0,constr_split_L(constr_xor(constr_h(constr_xor(name_k,constr_xor(name_r1,X0))),constr_rotate(name_ID,constr_h(constr_xor(name_k,constr_xor(name_r1,X0)))))))) | pred_attacker(tuple_R_out_4(name_objective)) (0:22) [forward demodulation 351,299]
357. 0 <=> pred_attacker(tuple_R_out_4(name_objective)) [avatar definition]
358. pred_attacker(tuple_R_out_4(name_objective)) <- {0} (0:3:1) [avatar component clause 357]
360. 2 <=> ! [X0] : ~pred_attacker(tuple_R_in_2(X0,constr_split_L(constr_xor(constr_h(constr_xor(name_k,constr_xor(name_r1,X0))),constr_rotate(name_ID,constr_h(constr_xor(name_k,constr_xor(name_r1,X0)))))))) [avatar definition]
361. ~pred_attacker(tuple_R_in_2(X0,constr_split_L(constr_xor(constr_h(constr_xor(name_k,constr_xor(name_r1,X0))),constr_rotate(name_ID,constr_h(constr_xor(name_k,constr_xor(name_r1,X0)))))))) <- {2} (0:19:1) [avatar component clause 360]
362. 0 | 2 [avatar split clause 352,360,357]
364. pred_attacker(name_r1_s1) (1:2:1) [resolution 311,336]
369. pred_attacker(name_r1) (1:2:1) [resolution 322,339]
370. constr_xor(constr_ZERO,X1) = X1 (1:5:1) [superposition 299,298, 298 into 299, unify on (0).2 in 298 and (0).1 in 299]
392. constr_xor(constr_ZERO,X1) = constr_xor(X0,constr_xor(X0,X1)) (1:9) [superposition 300,297, 297 into 300, unify on (0).2 in 297 and (0).2.1 in 300]
404. pred_attacker(constr_xor(X4,constr_xor(X5,X6))) | ~pred_attacker(X6) | ~pred_attacker(constr_xor(X4,X5)) (1:12:1) [superposition 301,300, 300 into 301, unify on (0).2 in 300 and (0).1 in 301]
407. constr_xor(X0,constr_xor(X0,X1)) = X1 (1:7:1) [forward demodulation 392,370]
446. pred_attacker(constr_split_L(constr_xor(constr_h(constr_xor(name_k,constr_xor(name_r1_s1,name_r2_s1))),constr_rotate(name_ID,constr_h(constr_xor(name_k,constr_xor(name_r1_s1,name_r2_s1))))))) (1:17:1) [resolution 344,309]
447. pred_attacker(name_r2_s1) (1:2:1) [resolution 344,308]
448. ~pred_attacker(constr_split_L(constr_xor(constr_h(constr_xor(name_k,constr_xor(name_r1,X0))),constr_rotate(name_ID,constr_h(constr_xor(name_k,constr_xor(name_r1,X0))))))) | ~pred_attacker(X0) <- {2} (1:19:1) [resolution 361,323]
787. pred_attacker(constr_xor(X4,constr_xor(X3,X2))) | ~pred_attacker(X3) | ~pred_attacker(constr_xor(X4,X2)) (2:12:1) [superposition 404,299, 299 into 404, unify on (0).2 in 299 and (0).1.2 in 404]
880. ~pred_attacker(constr_split_L(constr_xor(constr_h(constr_xor(name_k,X2)),constr_rotate(name_ID,constr_h(constr_xor(name_k,X2)))))) | ~pred_attacker(constr_xor(name_r1,X2)) <- {2} (2:17:1) [superposition 448,407, 407 into 448, unify on (0).2 in 407 and (0).1.1.1.1.2 in 448]
32540. ~pred_attacker(constr_xor(name_r1,constr_xor(name_r1_s1,name_r2_s1))) <- {2} (3:6:1) [resolution 880,446]
32597. ~pred_attacker(name_r1_s1) | ~pred_attacker(constr_xor(name_r1,name_r2_s1)) <- {2} (4:6) [resolution 32540,787]
32602. ~pred_attacker(constr_xor(name_r1,name_r2_s1)) <- {2} (4:4:1) [subsumption resolution 32597,364]
32673. ~pred_attacker(name_r2_s1) | ~pred_attacker(name_r1) <- {2} (5:4) [resolution 32602,301]
32674. ~pred_attacker(name_r1) <- {2} (5:2) [subsumption resolution 32673,447]
32675. $false <- {2} (5:0) [subsumption resolution 32674,369]
32676. ~2 [avatar contradiction clause 32675]
32724. pred_attacker(name_objective) <- {0} (1:2) [resolution 358,317]
32725. $false <- {0} (1:0) [subsumption resolution 32724,342]
32726. ~0 [avatar contradiction clause 32725]
32727. $false (0:0) [avatar sat refutation 362,32676,32726]
% SZS output end Proof for CH07-tag-auth
