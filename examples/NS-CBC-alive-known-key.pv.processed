const CONST_0 : bitstring.
const CONST_1 : bitstring.
const CONST_2 : bitstring.
const CONST_3 : bitstring.
const CONST_4 : bitstring.

pred eq_bitstring_bitstring(bitstring, bitstring).

clauses
  forall x : bitstring, y : bitstring;
    eq_bitstring_bitstring(x, y).

fun tuple_2_get_1(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_1((x0, x1)) = x1.

fun tuple_4_get_0(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring; 
    tuple_4_get_0((x0, x1, x2, x3)) = x0.

fun tuple_4_get_1(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring; 
    tuple_4_get_1((x0, x1, x2, x3)) = x1.

fun tuple_2_get_0_bitstring(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_0_bitstring((x0, x1)) = x0.

fun tuple_4_get_2_bitstring(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring; 
    tuple_4_get_2_bitstring((x0, x1, x2, x3)) = x2.

fun tuple_4_get_3_bitstring(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring; 
    tuple_4_get_3_bitstring((x0, x1, x2, x3)) = x3.

free c : channel.
free A : bitstring.
free B : bitstring.
free I : bitstring.

fun enc(bitstring, bitstring) : bitstring.
fun dec(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    dec(enc(m, k), k) = m.

fun succ(bitstring) : bitstring [data].
fun cbc_enc_1(bitstring, bitstring) : bitstring.
fun cbc_enc_2(bitstring, bitstring, bitstring) : bitstring.
fun cbc_enc_3(bitstring, bitstring, bitstring, bitstring) : bitstring.
fun cbc_enc_4(bitstring, bitstring, bitstring, bitstring, bitstring) : bitstring.
fun cbc_dec_1(bitstring, bitstring) : bitstring.
fun cbc_dec_2(bitstring, bitstring) : bitstring.
fun cbc_dec_3(bitstring, bitstring) : bitstring.
fun cbc_dec_4(bitstring, bitstring) : bitstring.
fun cbc_2_get_1_prefixes(bitstring) : bitstring.
fun cbc_3_get_1_prefixes(bitstring) : bitstring.
fun cbc_3_get_2_prefixes(bitstring) : bitstring.
fun cbc_4_get_1_prefixes(bitstring) : bitstring.
fun cbc_4_get_2_prefixes(bitstring) : bitstring.
fun cbc_4_get_3_prefixes(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, k : bitstring; 
    cbc_2_get_1_prefixes(cbc_enc_2(x0, x1, k)) = cbc_enc_1(x0, k).
equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, k : bitstring; 
    cbc_3_get_1_prefixes(cbc_enc_3(x0, x1, x2, k)) = cbc_enc_1(x0, k).
equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, k : bitstring; 
    cbc_3_get_2_prefixes(cbc_enc_3(x0, x1, x2, k)) = cbc_enc_2(x0, x1, k).
equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring, k : bitstring; 
    cbc_4_get_1_prefixes(cbc_enc_4(x0, x1, x2, x3, k)) = cbc_enc_1(x0, k).
equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring, k : bitstring; 
    cbc_4_get_2_prefixes(cbc_enc_4(x0, x1, x2, x3, k)) = cbc_enc_2(x0, x1, k).
equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring, k : bitstring; 
    cbc_4_get_3_prefixes(cbc_enc_4(x0, x1, x2, x3, k)) = cbc_enc_3(x0, x1, x2, k).
equation
  forall x0 : bitstring, k : bitstring; 
    cbc_dec_1(cbc_enc_1(x0, k), k) = x0.
equation
  forall x0 : bitstring, x1 : bitstring, k : bitstring; 
    cbc_dec_2(cbc_enc_2(x0, x1, k), k) = (x0, x1).
equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, k : bitstring; 
    cbc_dec_3(cbc_enc_3(x0, x1, x2, k), k) = (x0, x1, x2).
equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring, x3 : bitstring, k : bitstring; 
    cbc_dec_4(cbc_enc_4(x0, x1, x2, x3, k), k) = (x0, x1, x2, x3).

free objective1 : bitstring [private].
free objective2 : bitstring [private].

query 
  attacker((objective1, objective2)).

fun client_A_out_1(bitstring, bitstring, bitstring) : bitstring [data].
fun client_A_in_1(bitstring) : bitstring [data].
fun client_A_out_2(bitstring) : bitstring [data].
fun client_A_in_2(bitstring) : bitstring [data].
fun client_A_out_3(bitstring) : bitstring [data].
fun client_A_in_3(bitstring) : bitstring [data].
fun client_A_out_4(bitstring) : bitstring [data].
fun client_A_in_4(bitstring) : bitstring [data].
fun client_A_out_5(bitstring) : bitstring [data].
fun client_A_out_6(bitstring) : bitstring [data].

let client_A(Kas : bitstring) =
  new Na : bitstring;
  out(c, client_A_out_1(A, B, Na));
  in(c, client_A_in_1(enc_Na_B_enc_Kab_A : bitstring));
  
  if eq_bitstring_bitstring(Na, tuple_4_get_0(cbc_dec_4(enc_Na_B_enc_Kab_A, Kas))) then
  
  if eq_bitstring_bitstring(B, tuple_4_get_1(cbc_dec_4(enc_Na_B_enc_Kab_A, Kas))) then
  let Kab : bitstring = tuple_4_get_2_bitstring(cbc_dec_4(enc_Na_B_enc_Kab_A, Kas)) in
  let enc_Kab_A : bitstring = tuple_4_get_3_bitstring(cbc_dec_4(enc_Na_B_enc_Kab_A, Kas)) in
  out(c, client_A_out_2(enc_Kab_A));
  in(c, client_A_in_2(enc_Nb : bitstring));
  let Nb = cbc_dec_1(enc_Nb, Kab) in
  out(c, client_A_out_3(cbc_enc_1(succ(Nb), Kab)));
  new Na' : bitstring;
  in(c, client_A_in_3(enc_Kab_A' : bitstring));
  let Kab' : bitstring = tuple_2_get_0_bitstring(cbc_dec_2(enc_Kab_A', Kas)) in
  
  if eq_bitstring_bitstring(A, tuple_2_get_1(cbc_dec_2(enc_Kab_A', Kas))) then
  out(c, client_A_out_4(cbc_enc_1(Na', Kab')));
  in(c, client_A_in_4(enc_succ_Na' : bitstring));
  
  if eq_bitstring_bitstring(succ(Na'), cbc_dec_1(enc_succ_Na', Kab')) then
  out(c, client_A_out_5(objective1));
  out(c, client_A_out_6(enc(objective2, Kab')));
  0.

fun client_B_in_1(bitstring) : bitstring [data].
fun client_B_out_1(bitstring) : bitstring [data].
fun client_B_in_2(bitstring) : bitstring [data].

let client_B(Kbs : bitstring) =
  new Nb : bitstring;
  in(c, client_B_in_1(enc_Kab_A : bitstring));
  let Kab : bitstring = tuple_2_get_0_bitstring(cbc_dec_2(enc_Kab_A, Kbs)) in
  
  if eq_bitstring_bitstring(A, tuple_2_get_1(cbc_dec_2(enc_Kab_A, Kbs))) then
  out(c, client_B_out_1(cbc_enc_1(Nb, Kab)));
  in(c, client_B_in_2(enc_succ_Nb : bitstring));
  
  if eq_bitstring_bitstring(succ(Nb), cbc_dec_1(enc_succ_Nb, Kab)) then
  0.

fun server_S_in_1(bitstring, bitstring, bitstring) : bitstring [data].
fun server_S_out_1(bitstring) : bitstring [data].

let server_S(Kas : bitstring, Kbs : bitstring) =
  new Kab : bitstring;
  in(c, server_S_in_1(A : bitstring, B : bitstring, Na : bitstring));
  out(c, server_S_out_1(cbc_enc_4(Na, B, Kab, cbc_enc_2(Kab, A, Kbs), Kas)));
  0.

process
  new Kas : bitstring;
  new Kbs : bitstring;
  (
    ! (
      client_A(Kas)
    )
  )
  | (
    (
      ! (
        client_B(Kbs)
      )
    )
    | (
      ! (
        server_S(Kas, Kbs)
      )
    )
  )