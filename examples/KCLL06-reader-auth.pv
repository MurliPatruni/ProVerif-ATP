free PIN1 : bitstring [private].
free PIN2 : bitstring [private].

free EPC : bitstring [private].
free S : bitstring [private].

free c : channel.

fun xor(bitstring, bitstring) : bitstring.

const ZERO:bitstring.

(* associativity *)
equation forall x:bitstring, y:bitstring, z:bitstring; xor(x, xor(y, z)) = xor(xor(x, y), z).

(* commutativity *)
equation forall x:bitstring, y:bitstring; xor(x, y) = xor(y, x).

(* neutral element *)
equation forall x:bitstring; xor(x, ZERO) = x.

(* nilpotence *)
equation forall x:bitstring; xor(x, x) = ZERO.

const QUERY_REQ : bitstring.

fun ACK(bitstring) : bitstring.

fun f(bitstring) : bitstring.

fun concat(bitstring, bitstring) : bitstring.

(* associativity *)
equation forall x:bitstring, y:bitstring, z:bitstring;
  concat(concat(x, y), z) = concat(x, concat(y, z)).

fun add(bitstring, bitstring) : bitstring.
fun sub(bitstring, bitstring) : bitstring.

(* commutativity *)
equation forall x:bitstring, y:bitstring;
  add(x, y) = add(y, x).

(* associativity *)
equation forall x:bitstring, y:bitstring, z:bitstring;
  add(x, add(y, z)) = add(add(x, y), z).

equation forall x:bitstring, y:bitstring;
  sub(add(x, y), y) = x.
equation forall x:bitstring;
  sub(x, x) = ZERO.
equation forall x:bitstring;
  add(x, ZERO) = x.
equation forall x:bitstring;
  sub(x, ZERO) = x.
equation forall x:bitstring;
  add(ZERO, ZERO) = ZERO.

free objective : bitstring [private].
query attacker(objective).

let T =
  in(c, =QUERY_REQ);
  new r1 : bitstring;
  let M1 = xor(r1, PIN1) in
  out(c, M1);
  in(c, (ACK_M1 : bitstring, r2 : bitstring));
  if ACK_M1 = ACK(M1) then (
    let M2 = xor(xor(r2, PIN2), r1) in
    let M3 = f(M2) in
    let T = concat(ZERO, concat(r1, concat(M2, M3))) in
    let E = xor(add(T, S), EPC) in
    out(c, E);
    in(c, PIN_xor_f_r2_xor_PIN2_xor_r1 : bitstring);
    let f_r2_xor_PIN2_xor_r1 = xor(PIN_xor_f_r2_xor_PIN2_xor_r1, PIN1) in
    if f_r2_xor_PIN2_xor_r1 = f(xor(r2, xor(PIN2, r1))) then (
      out(c, objective)
    )
  ).

let knowledge_from_1st_round =
  new r1_from_1st_round : bitstring;
  out(c, QUERY_REQ);
  out(c, xor(r1_from_1st_round, PIN1));
  new r2_from_1st_round : bitstring;
  let M1 = xor(r1_from_1st_round, PIN1) in
  out(c, ACK(M1));
  let M2 = xor(xor(r2_from_1st_round, PIN2), r1_from_1st_round) in
  let M3 = f(M2) in
  let T = concat(ZERO, concat(r1_from_1st_round, concat(M2, M3))) in
  let E = xor(add(T, S), EPC) in
  out(c, E);
  out(c, xor(PIN1, f(xor(r2_from_1st_round, xor(PIN2, r1_from_1st_round))))).

process
  knowledge_from_1st_round | T
