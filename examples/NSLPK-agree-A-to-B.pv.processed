const CONST_0 : bitstring.
const CONST_1 : bitstring.
const CONST_2 : bitstring.
const CONST_3 : bitstring.
const CONST_4 : bitstring.

pred eq_bitstring_bitstring(bitstring, bitstring).

clauses
  forall x : bitstring, y : bitstring;
    eq_bitstring_bitstring(x, y).

fun tuple_2_get_0(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_0((x0, x1)) = x0.

fun tuple_2_get_1(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_1((x0, x1)) = x1.

fun tuple_3_get_0(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring; 
    tuple_3_get_0((x0, x1, x2)) = x0.

fun tuple_3_get_2(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring; 
    tuple_3_get_2((x0, x1, x2)) = x2.

fun tuple_2_get_0_bitstring(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_0_bitstring((x0, x1)) = x0.

fun tuple_2_get_1_bitstring(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring; 
    tuple_2_get_1_bitstring((x0, x1)) = x1.

fun tuple_3_get_1_bitstring(bitstring) : bitstring.

equation
  forall x0 : bitstring, x1 : bitstring, x2 : bitstring; 
    tuple_3_get_1_bitstring((x0, x1, x2)) = x1.

free c : channel.
free A : bitstring.
free B : bitstring.
free I : bitstring.

fun pkey(bitstring) : bitstring.

table keys(bitstring, bitstring).

fun sign(bitstring, bitstring) : bitstring.
fun checksign(bitstring, bitstring) : bitstring.
fun getmess(bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    checksign(sign(m, k), pkey(k)) = m.
equation
  forall m : bitstring, k : bitstring; 
    getmess(sign(m, k)) = m.

fun dec(bitstring, bitstring) : bitstring.
fun enc(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    dec(enc(m, k), k) = m.

fun aenc(bitstring, bitstring) : bitstring.
fun adec(bitstring, bitstring) : bitstring.

equation
  forall m : bitstring, k : bitstring; 
    adec(aenc(m, pkey(k)), k) = m.

free objective : bitstring [private].

query 
  attacker(objective).

fun client_A_out_1(bitstring, bitstring) : bitstring [data].
fun client_A_in_1(bitstring) : bitstring [data].
fun client_A_out_2(bitstring) : bitstring [data].
fun client_A_in_2(bitstring) : bitstring [data].
fun client_A_out_3(bitstring) : bitstring [data].

let client_A(skA : bitstring, pkS : bitstring) =
  new Na : bitstring;
  out(c, client_A_out_1(A, I));
  in(c, client_A_in_1(sign_I_pkI : bitstring));
  
  if eq_bitstring_bitstring(I, tuple_2_get_0(checksign(sign_I_pkI, pkS))) then
  let pkI : bitstring = tuple_2_get_1_bitstring(checksign(sign_I_pkI, pkS)) in
  out(c, client_A_out_2(aenc((Na, A), pkI)));
  in(c, client_A_in_2(aenc_Na_Ni_I : bitstring));
  
  if eq_bitstring_bitstring(Na, tuple_3_get_0(adec(aenc_Na_Ni_I, skA))) then
  let Ni : bitstring = tuple_3_get_1_bitstring(adec(aenc_Na_Ni_I, skA)) in
  
  if eq_bitstring_bitstring(I, tuple_3_get_2(adec(aenc_Na_Ni_I, skA))) then
  out(c, client_A_out_3(aenc(Ni, pkI)));
  0.

fun client_B_out_1(bitstring, bitstring) : bitstring [data].
fun client_B_in_1(bitstring) : bitstring [data].
fun client_B_in_2(bitstring) : bitstring [data].
fun client_B_out_2(bitstring) : bitstring [data].
fun client_B_in_3(bitstring) : bitstring [data].
fun client_B_out_3(bitstring) : bitstring [data].

let client_B(skB : bitstring, pkS : bitstring) =
  new Nb : bitstring;
  out(c, client_B_out_1(B, A));
  in(c, client_B_in_1(sign_A_pkA : bitstring));
  
  if eq_bitstring_bitstring(A, tuple_2_get_0(checksign(sign_A_pkA, pkS))) then
  let pkA : bitstring = tuple_2_get_1_bitstring(checksign(sign_A_pkA, pkS)) in
  in(c, client_B_in_2(aenc_Na_A : bitstring));
  let Na : bitstring = tuple_2_get_0_bitstring(adec(aenc_Na_A, skB)) in
  
  if eq_bitstring_bitstring(A, tuple_2_get_1(adec(aenc_Na_A, skB))) then
  out(c, client_B_out_2(aenc((Na, Nb, B), pkA)));
  in(c, client_B_in_3(aenc_Nb : bitstring));
  
  if eq_bitstring_bitstring(Nb, adec(aenc_Nb, skB)) then
  out(c, client_B_out_3(objective));
  0.

fun key_retrieval_server_in_1(bitstring, bitstring) : bitstring [data].
fun key_retrieval_server_out_1(bitstring) : bitstring [data].

let key_retrieval_server(skS : bitstring) =
  in(c, key_retrieval_server_in_1(src : bitstring, dst : bitstring));
  get keys(=dst, pkDst) in
  out(c, key_retrieval_server_out_1(sign((dst, pkDst), skS)));
  0.

fun key_register_server_in_1(bitstring, bitstring) : bitstring [data].

let key_register_server =
  in(c, key_register_server_in_1(host : bitstring, pk : bitstring));
  
  if host <> A && host <> B then
  insert keys(host, pk);
  0.

fun out_1(bitstring) : bitstring [data].
fun out_2(bitstring) : bitstring [data].
fun out_3(bitstring) : bitstring [data].

process
  new skA : bitstring;
  new skB : bitstring;
  new skS : bitstring;
  let pkA = pkey(skA) in
  let pkB = pkey(skB) in
  let pkS = pkey(skS) in
  insert keys(A, pkA);
  insert keys(B, pkB);
  out(c, out_1(pkA));
  out(c, out_2(pkB));
  out(c, out_3(pkS));
  (
    ! (
      client_A(skA, pkS)
    )
  )
  | (
    (
      ! (
        client_B(skB, pkS)
      )
    )
    | (
      (
        ! (
          key_retrieval_server(skS)
        )
      )
      | (
        ! (
          key_register_server
        )
      )
    )
  )