const CONST_0 : bitstring.
const CONST_1 : bitstring.
const CONST_2 : bitstring.
const CONST_3 : bitstring.
const CONST_4 : bitstring.

free PIN1 : bitstring [private].
free PIN2 : bitstring [private].
free EPC : bitstring [private].
free S : bitstring [private].
free c : channel.

fun xor(bitstring, bitstring) : bitstring.

const ZERO : bitstring.

equation
  forall x : bitstring, y : bitstring, z : bitstring; 
    xor(x, xor(y, z)) = xor(xor(x, y), z).
equation
  forall x : bitstring, y : bitstring; 
    xor(x, y) = xor(y, x).
equation
  forall x : bitstring; 
    xor(x, ZERO) = x.
equation
  forall x : bitstring; 
    xor(x, x) = ZERO.

const QUERY_REQ : bitstring.

fun ACK(bitstring) : bitstring.
fun f(bitstring) : bitstring.
fun concat(bitstring, bitstring) : bitstring.

equation
  forall x : bitstring, y : bitstring, z : bitstring; 
    concat(concat(x, y), z) = concat(x, concat(y, z)).

fun add(bitstring, bitstring) : bitstring.
fun sub(bitstring, bitstring) : bitstring.

equation
  forall x : bitstring, y : bitstring; 
    add(x, y) = add(y, x).
equation
  forall x : bitstring, y : bitstring, z : bitstring; 
    add(x, add(y, z)) = add(add(x, y), z).
equation
  forall x : bitstring, y : bitstring; 
    sub(add(x, y), y) = x.
equation
  forall x : bitstring; 
    sub(x, x) = ZERO.
equation
  forall x : bitstring; 
    add(x, ZERO) = x.
equation
  forall x : bitstring; 
    sub(x, ZERO) = x.
equation
  forall x : bitstring; 
    add(ZERO, ZERO) = ZERO.

free objective : bitstring [private].

query 
  attacker(objective).

fun T_in_1(bitstring) : bitstring [data].
fun T_out_1(bitstring) : bitstring [data].
fun T_in_2(bitstring, bitstring) : bitstring [data].
fun T_out_2(bitstring) : bitstring [data].
fun T_in_3(bitstring) : bitstring [data].
fun T_out_3(bitstring) : bitstring [data].

let T =
  in(c, T_in_1(=QUERY_REQ));
  new r1 : bitstring;
  let M1 = xor(r1, PIN1) in
  out(c, T_out_1(M1));
  in(c, T_in_2(ACK_M1 : bitstring, r2 : bitstring));
  
  if ACK_M1 = ACK(M1) then
  let M2 = xor(xor(r2, PIN2), r1) in
  let M3 = f(M2) in
  let T = concat(ZERO, concat(r1, concat(M2, M3))) in
  let E = xor(add(T, S), EPC) in
  out(c, T_out_2(E));
  in(c, T_in_3(PIN_xor_f_r2_xor_PIN2_xor_r1 : bitstring));
  let f_r2_xor_PIN2_xor_r1 = xor(PIN_xor_f_r2_xor_PIN2_xor_r1, PIN1) in
  
  if f_r2_xor_PIN2_xor_r1 = f(xor(r2, xor(PIN2, r1))) then
  out(c, T_out_3(objective));
  0.

fun knowledge_from_1st_round_out_1(bitstring) : bitstring [data].
fun knowledge_from_1st_round_out_2(bitstring) : bitstring [data].
fun knowledge_from_1st_round_out_3(bitstring) : bitstring [data].
fun knowledge_from_1st_round_out_4(bitstring) : bitstring [data].
fun knowledge_from_1st_round_out_5(bitstring) : bitstring [data].

let knowledge_from_1st_round =
  new r1_from_1st_round : bitstring;
  out(c, knowledge_from_1st_round_out_1(QUERY_REQ));
  out(c, knowledge_from_1st_round_out_2(xor(r1_from_1st_round, PIN1)));
  new r2_from_1st_round : bitstring;
  let M1 = xor(r1_from_1st_round, PIN1) in
  out(c, knowledge_from_1st_round_out_3(ACK(M1)));
  let M2 = xor(xor(r2_from_1st_round, PIN2), r1_from_1st_round) in
  let M3 = f(M2) in
  let T = concat(ZERO, concat(r1_from_1st_round, concat(M2, M3))) in
  let E = xor(add(T, S), EPC) in
  out(c, knowledge_from_1st_round_out_4(E));
  out(c, knowledge_from_1st_round_out_5(xor(PIN1, f(xor(r2_from_1st_round, xor(PIN2, r1_from_1st_round))))));
  0.

process
  (
    knowledge_from_1st_round
  )
  | (
    T
  )