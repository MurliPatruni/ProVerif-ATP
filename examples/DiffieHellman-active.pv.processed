const CONST_0 : bitstring.
const CONST_1 : bitstring.
const CONST_2 : bitstring.
const CONST_3 : bitstring.
const CONST_4 : bitstring.

pred eq(bitstring, bitstring).

clauses
  forall x : bitstring;
    eq(x, x).

free c : channel.

type pkey.
type skey.
type G.
type exponent.

fun sign(G, skey) : bitstring.
fun pk(skey) : pkey.

reduc
  forall m : G, k : skey; getmess(sign(m, k)) = m.
reduc
  forall m : G, k : skey; checksign(sign(m, k), pk(k)) = m.

fun enc(bitstring, G) : bitstring.

reduc
  forall x : bitstring, y : G; dec(enc(x, y), y) = x.

const g : G.

fun exp(G, exponent) : G.

equation
  forall x : exponent, y : exponent; 
    exp(exp(g, x), y) = exp(exp(g, y), x).

free s : bitstring [private].

query 
  attacker(s).

const p0_STEP_1 : bitstring.
const p0_STEP_2 : bitstring.

let p0(skA : skey, pkA : pkey, pkB : pkey) =
  in(c, pkX : pkey);
  new n0 : exponent;
  out(c, ((sign(exp(g, n0), skA), pkA), p0_STEP_1));
  in(c, m1 : bitstring);
  let x1 = checksign(m1, pkX) in
  let k = exp(x1, n0) in
  
  if pkX = pkB then
  out(c, (enc(s, k), p0_STEP_2));
  0.

const p1_STEP_1 : bitstring.

let p1(skB : skey, pkB : pkey, pkA : pkey) =
  in(c, (m0 : bitstring, pkY : pkey));
  let x0 = checksign(m0, pkY) in
  new n1 : exponent;
  let k = exp(x0, n1) in
  out(c, (sign(exp(g, n1), skB), p1_STEP_1));
  in(c, m : bitstring);
  let s2 = dec(m, k) in
  0.

const STEP_1 : bitstring.
const STEP_2 : bitstring.

process
  new skA : skey;
  let pkA = pk(skA) in
  out(c, (pkA, STEP_1));
  new skB : skey;
  let pkB = pk(skB) in
  out(c, (pkB, STEP_2));
  (
    ! (
      p0(skA, pkA, pkB)
    )
  )
  | (
    ! (
      p1(skB, pkB, pkA)
    )
  )