free c : channel.

const ZERO:bitstring.

free k : bitstring [private].

fun h(bitstring) : bitstring.

fun xor(bitstring, bitstring) : bitstring.

(* associativity *)
equation forall x:bitstring, y:bitstring, z:bitstring; xor(x, xor(y, z)) = xor(xor(x, y), z).

(* commutativity *)
equation forall x:bitstring, y:bitstring; xor(x, y) = xor(y, x).

(* neutral element *)
equation forall x:bitstring; xor(x, ZERO) = x.

(* nilpotence *)
equation forall x:bitstring; xor(x, x) = ZERO.

free objective_R : bitstring [private].

query attacker(objective_R).

let R =
  new r0 : bitstring;
  out(c, r0);                          (* 1. *)
  in(c, (r1_in : bitstring,
         h_res : bitstring));                    (* 2. *)
  if h_res = h(xor(xor(r0, r1_in), k)) then (
    out(c, h(xor(xor(h_res, k), r0)));  (* 3. *)
    out(c, objective_R)
  ).

let knowledge_from_1st_round =
  (* run R and T internally once and output all network traffic *)
  new r0_from_1st : bitstring;
  new r1_from_1st : bitstring;
  out(c, r0_from_1st); (* 1. *)
  let h_res = h(xor(xor(r0_from_1st, r1_from_1st), k)) in
  out(c, (r1_from_1st, h_res));               (* 2. *)
  out(c, h(xor(xor(h_res, k), r0_from_1st)));
  0.

process
  knowledge_from_1st_round | R
