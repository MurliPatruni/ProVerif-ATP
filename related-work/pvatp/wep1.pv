free c : channel.

fun xor(bitstring, bitstring) : bitstring.

const ZERO:bitstring.

(* associativity *)
equation forall x:bitstring, y:bitstring, z:bitstring; xor(x, xor(y, z)) = xor(xor(x, y), z).

(* commutativity *)
equation forall x:bitstring, y:bitstring; xor(x, y) = xor(y, x).

(* neutral element *)
equation forall x:bitstring; xor(x, ZERO) = x.

(* nilpotence *)
equation forall x:bitstring; xor(x, x) = ZERO.

fun crc(bitstring) : bitstring.

fun concat(bitstring, bitstring) : bitstring.

fun split(bitstring) : bitstring.

equation forall x:bitstring, y:bitstring;
  crc(xor(x, y)) = xor(crc(x), crc(y)).

equation forall u:bitstring, v:bitstring, x:bitstring, y:bitstring;
  concat(xor(u, x), xor(v, y)) = xor(concat(u, v), concat(x, y)).

equation forall x:bitstring, y:bitstring;
  split(concat(x, y)) = (x, y).

query attacker(new b).

let A =
  new a : bitstring;
  new b : bitstring;
  new k : bitstring;
  let m1 = xor(concat(a, crc(a)), k) in
  let m2 = xor(concat(b, crc(b)), k) in
  out(c, (a, m1, m2)).

process A
