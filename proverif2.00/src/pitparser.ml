type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | ATIDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | PROJECTION of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | BARRIER
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | LESS
  | GREATER
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | IMPLEMENTATION
  | EQUIVALENCE
  | OTHERWISE
  | FOREACH
  | DO
  | SECRET
  | PUBLICVARS
  | RANDOM
  | LEFTARROW
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2018                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 126 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  274 (* REPL *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* EQUAL *);
  279 (* FUN *);
  280 (* EQUATION *);
  281 (* REDUCTION *);
  282 (* PREDICATE *);
  283 (* PROCESS *);
  284 (* SLASH *);
  285 (* DOT *);
    0 (* EOF *);
  286 (* LET *);
  287 (* QUERY *);
  288 (* BEFORE *);
  289 (* PUTBEGIN *);
  290 (* NONINTERF *);
  291 (* EVENT *);
  292 (* NOT *);
  293 (* ELIMTRUE *);
  294 (* FREE *);
  295 (* SUCHTHAT *);
  296 (* CLAUSES *);
  297 (* RED *);
  298 (* EQUIV *);
  299 (* EQUIVEQ *);
  300 (* WEDGE *);
  301 (* DIFF *);
  302 (* COLON *);
  303 (* NOUNIF *);
  304 (* PHASE *);
  305 (* BARRIER *);
  306 (* AMONG *);
  307 (* WEAKSECRET *);
  308 (* PARAM *);
  309 (* ORTEXT *);
  310 (* FAIL *);
  311 (* LESS *);
  312 (* GREATER *);
  313 (* TYPE *);
  314 (* SET *);
  315 (* FORALL *);
  316 (* CONST *);
  317 (* INJEVENT *);
  318 (* OR *);
  319 (* CHANNEL *);
  320 (* LETFUN *);
  321 (* DEFINE *);
  322 (* EXPAND *);
  323 (* YIELD *);
  324 (* LEQ *);
  325 (* PROBA *);
  326 (* LBRACE *);
  327 (* RBRACE *);
  328 (* PROOF *);
  329 (* IMPLEMENTATION *);
  330 (* EQUIVALENCE *);
  331 (* OTHERWISE *);
  332 (* FOREACH *);
  333 (* DO *);
  334 (* SECRET *);
  335 (* PUBLICVARS *);
  336 (* RANDOM *);
  337 (* LEFTARROW *);
  338 (* TABLE *);
  339 (* INSERT *);
  340 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* ATIDENT *);
  271 (* STRING *);
  272 (* PROJECTION *);
  273 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\026\000\026\000\021\000\021\000\
\022\000\022\000\027\000\027\000\027\000\027\000\028\000\028\000\
\031\000\031\000\032\000\032\000\033\000\033\000\029\000\029\000\
\034\000\035\000\035\000\030\000\030\000\006\000\006\000\011\000\
\011\000\036\000\036\000\036\000\016\000\016\000\037\000\037\000\
\008\000\008\000\007\000\007\000\038\000\038\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\040\000\040\000\039\000\039\000\041\000\041\000\019\000\
\019\000\018\000\018\000\042\000\042\000\042\000\042\000\043\000\
\043\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\046\000\046\000\044\000\044\000\047\000\
\047\000\047\000\047\000\045\000\045\000\017\000\017\000\017\000\
\017\000\050\000\050\000\051\000\051\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\053\000\053\000\049\000\
\049\000\054\000\054\000\054\000\054\000\052\000\052\000\055\000\
\055\000\023\000\023\000\014\000\014\000\056\000\056\000\057\000\
\057\000\009\000\009\000\010\000\010\000\012\000\012\000\058\000\
\058\000\058\000\058\000\024\000\024\000\059\000\059\000\060\000\
\060\000\061\000\061\000\062\000\063\000\063\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\065\000\065\000\070\000\070\000\066\000\066\000\
\068\000\068\000\067\000\067\000\067\000\067\000\071\000\071\000\
\069\000\069\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\072\000\072\000\064\000\064\000\073\000\
\073\000\074\000\074\000\003\000\003\000\003\000\004\000\004\000\
\000\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\005\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\006\000\004\000\006\000\004\000\006\000\004\000\
\004\000\006\000\004\000\005\000\004\000\005\000\004\000\006\000\
\004\000\004\000\007\000\003\000\009\000\007\000\000\000\004\000\
\005\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\003\000\
\001\000\003\000\005\000\005\000\004\000\004\000\001\000\001\000\
\001\000\003\000\003\000\003\000\001\000\003\000\003\000\000\000\
\003\000\001\000\003\000\003\000\000\000\003\000\000\000\003\000\
\001\000\000\000\002\000\003\000\005\000\003\000\003\000\000\000\
\001\000\001\000\001\000\000\000\003\000\001\000\001\000\004\000\
\004\000\006\000\001\000\003\000\003\000\004\000\003\000\003\000\
\003\000\003\000\001\000\001\000\000\000\005\000\001\000\003\000\
\001\000\003\000\001\000\002\000\004\000\004\000\004\000\000\000\
\002\000\004\000\001\000\006\000\006\000\003\000\003\000\004\000\
\003\000\003\000\006\000\004\000\004\000\004\000\003\000\003\000\
\005\000\002\000\006\000\003\000\001\000\001\000\000\000\006\000\
\004\000\005\000\003\000\001\000\000\000\006\000\006\000\002\000\
\006\000\002\000\000\000\002\000\000\000\004\000\006\000\001\000\
\003\000\005\000\002\000\002\000\006\000\003\000\001\000\001\000\
\000\000\006\000\004\000\005\000\003\000\001\000\000\000\003\000\
\005\000\003\000\001\000\001\000\000\000\003\000\000\000\006\000\
\005\000\005\000\004\000\006\000\004\000\002\000\004\000\003\000\
\001\000\003\000\003\000\004\000\003\000\003\000\000\000\001\000\
\003\000\003\000\003\000\003\000\001\000\000\000\002\000\003\000\
\001\000\004\000\002\000\005\000\006\000\001\000\001\000\006\000\
\004\000\005\000\007\000\008\000\004\000\007\000\004\000\004\000\
\007\000\006\000\007\000\009\000\003\000\007\000\004\000\003\000\
\003\000\006\000\002\000\000\000\002\000\000\000\002\000\000\000\
\001\000\003\000\001\000\003\000\004\000\002\000\003\000\001\000\
\001\000\000\000\004\000\006\000\001\000\003\000\003\000\004\000\
\003\000\003\000\007\000\005\000\004\000\006\000\006\000\008\000\
\005\000\006\000\008\000\008\000\005\000\007\000\009\000\007\000\
\011\000\009\000\003\000\003\000\001\000\001\000\000\000\001\000\
\001\000\003\000\003\000\000\000\001\000\003\000\003\000\001\000\
\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\001\000\000\034\001\024\001\025\001\035\001\000\000\000\000\
\000\000\036\001\000\000\000\000\000\000\000\000\000\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\108\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\116\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\152\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\050\000\051\000\052\000\042\000\043\000\
\044\000\049\000\046\000\047\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\
\000\000\000\000\000\000\215\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\001\030\001\031\001\000\000\
\000\000\105\000\000\000\000\000\000\000\000\000\000\000\101\000\
\000\000\089\000\090\000\000\000\000\000\091\000\087\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\180\000\
\000\000\000\000\000\000\136\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\127\000\000\000\121\000\114\000\
\000\000\000\000\000\000\024\000\112\000\000\000\007\000\000\000\
\027\000\000\000\033\000\000\000\178\000\080\000\000\000\182\000\
\000\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\168\000\156\000\000\000\
\000\000\000\000\000\000\020\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\054\000\000\000\000\000\
\000\000\000\000\000\000\031\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\211\000\000\000\000\000\000\000\000\000\000\000\000\000\243\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\106\000\096\000\097\000\102\000\
\000\000\000\000\078\000\006\000\191\000\004\000\000\000\000\000\
\010\000\000\000\000\000\000\000\140\000\000\000\000\000\000\000\
\148\000\000\000\000\000\000\000\118\000\119\000\132\000\128\000\
\133\000\117\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\000\000\000\
\164\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\056\000\000\000\064\000\063\000\000\000\062\000\061\000\000\000\
\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\242\000\000\000\204\000\000\000\000\000\000\000\000\000\
\000\000\249\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\232\000\000\000\233\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\093\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\137\000\000\000\085\000\
\000\000\000\000\021\000\110\000\023\000\000\000\026\000\177\000\
\032\000\000\000\000\000\161\000\000\000\000\000\000\000\166\000\
\000\000\000\000\000\000\000\000\019\000\016\000\017\000\018\000\
\000\000\000\000\000\000\000\000\019\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\255\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\059\000\000\000\083\000\000\000\000\000\
\000\000\000\000\210\000\000\000\000\000\198\000\000\000\217\000\
\000\000\000\000\000\000\244\000\000\000\000\000\000\000\000\000\
\000\000\231\000\000\000\000\000\000\000\000\000\000\000\223\000\
\098\000\000\000\188\000\000\000\000\000\131\000\000\000\000\000\
\124\000\000\000\125\000\008\000\035\000\000\000\000\000\000\000\
\000\000\174\000\158\000\000\000\154\000\151\000\150\000\153\000\
\005\000\000\000\000\000\020\001\000\000\251\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\084\000\000\000\000\000\000\000\203\000\202\000\
\201\000\212\000\000\000\218\000\247\000\245\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\162\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
\000\000\000\000\000\000\071\000\216\000\000\000\000\000\000\000\
\000\000\000\000\000\000\234\000\213\000\226\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\146\000\000\000\159\000\
\000\000\000\000\165\000\015\000\252\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\073\000\075\000\
\000\000\067\000\068\000\070\000\205\000\000\000\219\000\225\000\
\222\000\230\000\000\000\000\000\227\000\000\000\000\000\002\000\
\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\220\000\000\000\000\000\000\000\172\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\228\000\
\003\000\000\000\170\000\000\000\000\000\000\000\186\000\000\000\
\000\000\000\000\000\000\000\000\000\000\184\000"

let yydgoto = "\006\000\
\033\000\034\000\038\000\042\000\118\000\132\000\004\001\005\001\
\218\002\054\000\085\000\052\000\240\000\015\001\203\001\069\000\
\093\000\070\000\075\000\142\000\214\000\109\000\016\001\087\000\
\215\000\216\000\110\000\229\001\076\002\074\002\242\002\152\002\
\153\002\148\002\149\002\235\001\053\000\006\001\119\000\120\000\
\076\000\072\000\164\000\143\000\160\001\144\000\161\001\068\001\
\069\001\042\002\187\000\121\002\070\001\122\002\083\000\088\000\
\031\003\184\000\119\001\240\001\241\001\241\000\246\002\204\001\
\003\002\164\002\248\001\097\001\249\001\217\002\250\001\205\001\
\039\000\040\000"

let yysindex = "\056\002\
\201\008\201\008\197\255\018\255\106\000\000\000\055\255\067\255\
\067\255\125\255\221\255\001\001\236\255\028\000\198\000\132\005\
\067\000\214\255\022\255\089\000\067\000\114\000\145\000\067\000\
\067\000\163\000\179\000\188\000\210\000\234\255\172\255\247\000\
\000\000\254\254\000\000\000\000\000\000\000\000\104\000\254\000\
\216\000\000\000\035\001\106\000\038\001\059\001\070\001\000\000\
\092\255\071\001\072\001\083\001\106\000\083\001\106\000\151\000\
\083\000\084\001\253\007\080\001\057\255\086\001\008\255\105\001\
\108\001\131\001\125\001\139\001\112\001\115\001\118\001\136\001\
\236\000\143\001\124\001\152\001\215\255\147\001\234\005\106\255\
\146\006\148\001\162\001\163\001\122\001\156\001\201\008\106\000\
\211\255\157\001\168\001\173\001\158\001\164\001\083\001\083\001\
\169\001\149\001\170\001\090\000\181\001\197\001\175\001\234\001\
\189\001\192\001\193\001\194\001\179\001\200\001\208\001\053\008\
\053\008\197\255\197\255\018\255\106\000\150\000\210\001\000\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\028\255\
\167\001\218\001\067\000\188\001\203\005\212\001\011\005\028\255\
\215\001\156\001\053\008\253\007\225\001\154\255\241\001\000\000\
\246\001\253\007\028\255\232\001\209\001\219\001\253\007\253\007\
\253\007\180\001\253\007\218\006\201\008\253\007\253\007\253\007\
\253\007\253\007\067\000\000\000\218\006\004\002\254\001\201\008\
\254\001\028\255\201\008\253\007\201\008\028\255\201\008\106\000\
\156\001\067\000\028\255\222\001\005\002\000\000\130\007\242\255\
\130\002\001\002\000\000\007\002\130\002\026\255\201\008\201\008\
\247\001\253\001\102\001\028\255\201\008\156\001\066\255\028\255\
\028\255\201\008\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\220\001\234\001\028\002\
\017\002\023\002\031\002\040\002\201\008\172\255\028\255\053\008\
\050\002\060\002\061\002\049\255\000\000\074\008\066\255\071\000\
\053\002\054\002\058\002\000\000\057\002\064\002\066\002\004\000\
\053\008\242\001\032\008\104\000\000\000\000\000\000\000\229\000\
\106\000\000\000\076\002\092\001\010\002\041\002\201\255\000\000\
\092\255\000\000\000\000\079\002\086\002\000\000\000\000\083\002\
\201\008\067\255\201\008\106\000\087\002\201\008\088\002\000\000\
\248\255\240\255\253\007\000\000\173\000\089\002\093\002\253\007\
\067\000\067\000\090\002\118\000\095\002\083\001\166\001\062\002\
\000\000\080\002\118\005\254\255\000\000\118\005\000\000\000\000\
\106\000\048\002\097\002\000\000\000\000\122\002\000\000\062\006\
\000\000\075\002\000\000\025\007\000\000\000\000\083\001\000\000\
\106\000\106\000\106\000\214\255\000\000\127\002\128\002\130\002\
\129\002\140\002\132\002\143\002\142\002\000\000\000\000\130\002\
\145\002\032\255\124\002\000\000\000\000\201\008\201\008\126\002\
\134\002\146\002\083\001\000\000\153\002\155\002\066\255\138\002\
\012\255\066\255\071\000\164\002\182\002\174\002\175\002\079\007\
\078\002\184\002\187\002\000\000\201\008\000\000\234\001\178\002\
\244\255\179\002\185\002\000\000\000\000\211\002\103\000\213\002\
\066\255\066\255\066\255\207\002\028\255\028\255\151\002\109\255\
\000\000\129\005\166\000\119\255\066\255\183\002\203\002\000\000\
\211\000\217\002\137\000\159\002\226\002\227\002\053\008\000\000\
\224\002\066\255\019\000\106\000\000\000\000\000\000\000\000\000\
\188\002\028\255\000\000\000\000\000\000\000\000\152\255\083\001\
\000\000\214\002\201\008\253\007\000\000\216\002\222\002\233\002\
\000\000\198\002\072\001\228\001\000\000\000\000\000\000\000\000\
\000\000\000\000\199\002\201\008\228\002\201\008\230\002\201\008\
\197\002\201\008\231\002\092\255\092\255\092\255\000\000\130\002\
\000\000\006\003\009\003\130\002\246\002\130\002\225\002\004\003\
\225\002\201\008\000\000\000\000\201\008\201\008\201\008\247\002\
\025\003\066\255\232\000\023\003\000\000\213\002\066\255\028\255\
\180\006\005\003\026\003\009\001\066\255\045\003\046\003\066\255\
\201\008\066\255\066\255\066\255\066\255\239\002\029\003\000\000\
\000\000\048\003\000\000\000\000\049\003\000\000\000\000\031\003\
\000\000\200\255\015\003\234\000\022\001\057\003\129\000\059\003\
\061\003\000\000\217\002\000\000\054\003\053\008\158\255\065\003\
\070\003\000\000\166\000\028\255\239\000\066\255\066\255\066\255\
\217\002\053\008\000\000\066\003\000\000\074\003\066\255\166\000\
\224\002\068\006\000\000\052\003\028\255\000\000\067\255\071\003\
\053\008\000\000\102\005\253\007\077\003\000\000\078\003\000\000\
\253\007\084\003\000\000\000\000\000\000\201\008\000\000\000\000\
\000\000\201\008\085\003\000\000\201\000\099\003\130\002\000\000\
\090\003\081\003\026\255\081\003\000\000\000\000\000\000\000\000\
\201\008\066\255\043\001\066\255\000\000\064\003\106\003\103\003\
\066\255\066\255\066\255\066\255\104\003\092\002\066\255\166\000\
\072\003\000\000\011\000\000\000\116\006\083\006\201\008\201\008\
\102\003\000\000\122\255\000\000\201\008\000\000\109\003\028\255\
\066\255\166\000\000\000\105\003\110\003\000\000\207\002\000\000\
\053\008\078\000\166\000\000\000\114\003\093\002\173\002\001\003\
\119\003\000\000\224\002\118\003\053\003\121\003\133\003\000\000\
\000\000\040\255\000\000\201\008\022\000\000\000\133\005\253\007\
\000\000\116\008\000\000\000\000\000\000\130\002\117\003\129\003\
\140\003\000\000\000\000\138\003\000\000\000\000\000\000\000\000\
\000\000\143\008\066\255\000\000\028\255\000\000\066\255\017\007\
\136\003\220\003\146\003\066\255\000\000\147\003\150\003\066\255\
\092\003\000\000\160\003\170\003\176\003\162\003\163\003\179\003\
\182\003\000\000\000\000\217\002\094\002\185\003\000\000\000\000\
\000\000\000\000\053\008\000\000\000\000\000\000\053\008\053\008\
\213\002\217\002\053\008\217\002\170\255\214\255\164\003\000\000\
\201\008\173\000\162\005\187\003\130\002\173\003\000\000\130\002\
\201\008\099\004\188\003\116\006\066\255\066\255\066\255\213\002\
\116\006\190\003\175\255\116\006\201\008\181\003\102\003\000\000\
\186\003\186\003\122\255\000\000\000\000\131\003\217\002\224\002\
\078\000\078\000\217\002\000\000\000\000\000\000\053\008\066\255\
\189\003\083\001\106\000\201\008\000\000\000\000\173\000\000\000\
\194\003\130\002\000\000\000\000\000\000\066\255\116\006\202\007\
\228\007\200\003\066\255\066\255\066\255\000\000\000\000\000\000\
\211\003\000\000\000\000\000\000\000\000\217\002\000\000\000\000\
\000\000\000\000\224\002\048\004\000\000\193\003\167\006\000\000\
\000\000\201\000\214\003\116\006\066\255\066\255\066\255\116\006\
\052\008\183\004\186\003\000\000\189\003\201\008\106\000\000\000\
\201\000\116\006\116\006\116\006\066\255\066\255\000\000\000\000\
\000\000\118\255\000\000\116\006\089\008\214\255\000\000\066\255\
\106\000\116\006\092\007\106\000\118\255\000\000"

let yyrindex = "\000\000\
\035\255\230\004\231\004\000\000\000\000\000\000\000\000\215\005\
\215\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\006\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\234\004\
\235\004\000\000\000\000\231\003\089\001\000\000\000\000\000\000\
\239\004\000\000\000\000\218\003\000\000\218\003\000\000\218\003\
\000\000\000\000\002\004\000\000\208\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\237\003\
\163\255\000\000\000\000\238\003\000\000\000\000\000\000\200\008\
\000\000\000\000\045\001\003\001\000\000\000\000\008\000\000\000\
\115\001\000\000\000\000\000\000\000\000\000\000\218\003\218\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\239\003\000\000\000\000\
\000\000\000\000\231\004\000\000\000\000\008\004\000\000\000\000\
\231\003\000\000\000\000\000\000\000\000\000\000\000\000\011\004\
\000\000\000\000\000\000\000\000\063\000\000\000\000\000\011\004\
\000\000\012\004\000\000\000\000\059\000\013\004\000\000\000\000\
\123\008\002\004\000\000\000\000\000\000\000\000\002\004\000\000\
\002\004\181\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\011\004\008\000\000\000\008\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\016\004\000\000\000\000\000\000\016\004\000\000\008\000\008\000\
\000\000\000\000\000\000\000\000\008\000\012\004\000\000\011\004\
\011\004\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\255\207\003\
\000\000\000\000\000\000\000\000\008\000\000\000\011\004\000\000\
\000\000\000\000\000\000\109\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\200\000\000\000\
\117\001\000\000\000\000\000\000\018\004\000\000\000\000\000\000\
\008\000\215\005\008\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\004\000\000\155\255\000\000\
\000\000\000\000\000\000\000\000\000\000\115\000\000\000\000\000\
\000\000\189\008\174\001\068\255\000\000\176\255\000\000\000\000\
\000\000\163\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\218\003\000\000\
\000\000\000\000\000\000\043\006\000\000\000\000\000\000\016\004\
\000\000\101\001\000\000\020\004\000\000\000\000\000\000\000\000\
\000\000\115\001\000\000\000\000\000\000\008\000\008\000\000\000\
\000\000\000\000\218\003\000\000\000\000\000\000\022\004\000\000\
\213\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\240\003\
\000\000\000\000\022\004\000\000\000\000\000\000\000\000\109\005\
\000\000\000\000\210\001\007\004\000\000\000\000\000\000\000\000\
\020\006\053\006\053\006\000\000\000\000\000\000\000\000\000\000\
\104\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\140\255\218\003\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\008\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\168\008\008\000\000\000\008\000\000\000\008\000\
\000\000\008\000\000\000\132\000\160\000\191\000\000\000\000\000\
\000\000\000\000\018\002\016\004\000\000\000\000\224\000\000\000\
\224\000\008\000\000\000\000\000\008\000\008\000\008\000\000\000\
\000\000\000\000\026\004\000\000\000\000\240\003\022\004\000\000\
\000\000\000\000\000\000\028\004\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\215\000\000\000\000\000\221\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\004\000\000\053\006\000\000\000\000\000\000\233\000\037\004\
\000\000\000\000\210\001\000\000\048\001\000\000\000\000\022\004\
\053\006\000\000\000\000\000\000\000\000\000\000\022\004\210\001\
\137\006\053\006\000\000\000\000\000\000\000\000\215\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\008\000\000\000\000\000\043\004\000\000\000\000\000\000\
\000\000\115\001\000\000\115\001\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\004\000\000\000\000\022\004\210\001\
\039\002\000\000\100\002\000\000\161\002\000\000\236\003\008\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\226\007\000\000\000\000\000\000\112\000\188\006\239\006\
\000\000\000\000\016\007\000\000\000\000\000\000\000\000\000\000\
\000\000\218\003\000\000\008\000\000\000\000\000\051\004\000\000\
\000\000\073\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\171\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\004\000\000\000\000\000\000\055\004\
\000\000\000\000\000\000\053\006\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\192\005\053\006\000\000\053\006\067\007\043\006\000\000\000\000\
\008\000\000\000\056\004\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\194\002\000\000\000\000\000\000\028\004\
\245\002\000\000\000\000\022\003\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\225\005\053\006\100\007\
\226\007\226\007\053\006\000\000\000\000\000\000\000\000\000\000\
\151\007\218\003\000\000\008\000\000\000\000\000\000\000\000\000\
\057\004\000\000\000\000\000\000\000\000\000\000\073\003\204\004\
\255\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\073\001\000\000\000\000\000\000\000\000\053\006\000\000\000\000\
\000\000\000\000\184\007\067\007\000\000\000\000\000\000\000\000\
\000\000\000\000\060\004\124\003\000\000\000\000\000\000\157\003\
\032\005\000\000\000\000\000\000\151\007\008\000\000\000\000\000\
\000\000\208\003\241\003\036\004\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\069\004\083\005\043\006\000\000\000\000\
\000\000\120\004\000\000\000\000\120\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\216\004\236\004\251\255\205\255\149\255\124\255\
\000\000\076\003\253\255\084\004\166\255\153\004\168\255\015\000\
\072\255\047\000\216\001\066\000\250\003\134\004\001\000\041\004\
\000\000\143\004\000\000\000\000\000\000\000\000\078\253\000\000\
\158\002\000\000\165\002\134\254\249\255\217\003\246\004\064\255\
\000\000\000\000\215\004\094\001\000\000\095\004\115\253\211\254\
\077\255\178\003\097\000\000\000\192\003\057\253\000\000\102\253\
\085\002\000\000\000\000\047\003\000\000\000\000\000\000\173\254\
\158\254\145\253\036\255\157\255\043\254\120\002\044\003\094\003\
\028\005\033\005"

let yytablesize = 2587
let yytable = "\049\000\
\035\000\055\000\134\000\136\001\137\000\075\001\001\002\039\000\
\026\001\073\001\081\000\127\001\242\000\242\000\023\001\207\001\
\082\000\095\000\011\002\219\002\098\000\099\000\243\000\243\002\
\112\000\053\000\192\001\074\000\013\001\078\000\041\000\238\001\
\005\002\092\000\089\000\185\000\222\002\093\002\074\001\242\000\
\002\001\050\001\149\000\193\000\194\000\131\000\055\001\133\000\
\017\001\135\000\103\002\090\000\115\001\100\000\116\001\090\000\
\141\001\117\001\016\003\186\000\146\000\039\000\046\001\083\001\
\174\002\130\000\086\001\050\000\150\000\087\001\130\000\113\000\
\130\000\027\003\130\000\088\001\130\000\071\000\089\001\130\000\
\079\000\001\003\183\000\054\002\090\001\182\000\181\000\053\000\
\023\003\061\002\003\001\208\001\098\001\099\001\117\001\091\001\
\130\000\248\002\249\002\130\000\092\001\093\001\147\000\091\000\
\173\001\253\002\143\002\091\000\039\000\121\000\096\001\248\000\
\115\001\124\000\116\001\110\001\252\000\253\000\254\000\255\000\
\000\001\001\001\251\001\055\002\242\000\051\000\211\001\008\001\
\118\001\130\000\242\000\033\003\128\001\111\001\150\002\125\000\
\126\000\056\000\035\002\121\001\186\001\242\000\122\001\242\000\
\088\002\189\000\130\000\151\002\094\001\095\001\137\001\174\000\
\139\001\127\000\117\001\033\001\019\001\024\003\098\002\039\001\
\015\002\251\001\126\000\086\000\252\001\111\000\044\001\104\002\
\189\000\047\001\052\001\049\001\097\002\051\001\054\001\158\000\
\245\001\053\001\129\000\102\002\129\000\215\002\129\000\100\000\
\129\000\159\000\236\002\129\000\118\001\076\001\077\001\111\000\
\030\003\086\000\105\000\084\001\126\000\160\000\161\000\104\000\
\100\001\100\000\032\001\117\001\129\000\018\001\078\002\129\000\
\216\002\036\000\037\000\040\001\084\000\237\002\185\000\162\000\
\123\000\028\001\170\000\108\001\031\001\071\000\124\000\034\001\
\035\001\036\001\037\001\038\001\106\000\123\000\071\000\107\000\
\139\002\057\000\170\001\142\002\123\000\048\001\186\000\123\000\
\242\001\243\001\156\001\171\000\125\000\126\000\126\001\128\001\
\073\000\124\002\060\001\123\000\123\000\108\000\129\000\135\001\
\147\000\209\001\227\001\179\001\228\001\158\000\151\001\148\001\
\038\002\150\001\187\000\135\001\153\001\123\000\061\001\159\000\
\086\000\026\001\120\000\158\000\155\001\165\001\166\001\128\001\
\236\001\237\001\135\001\160\000\161\000\135\001\123\000\200\001\
\216\001\187\000\039\000\242\000\253\001\176\000\120\000\176\000\
\077\000\160\000\161\000\176\000\009\002\162\000\211\002\104\000\
\100\000\010\002\177\002\180\001\181\001\182\001\218\001\219\001\
\100\000\205\002\100\000\100\000\100\000\123\000\100\000\123\000\
\193\000\123\000\100\000\123\000\190\000\234\002\123\000\212\002\
\180\002\214\002\123\001\056\002\195\001\196\001\039\000\084\000\
\123\000\039\000\100\000\124\001\193\000\135\001\138\000\123\000\
\099\000\164\001\123\000\190\000\125\001\198\000\100\000\100\000\
\100\000\100\000\163\002\224\001\016\002\094\000\123\000\123\000\
\139\000\210\001\043\000\233\001\247\002\044\000\135\001\199\000\
\250\002\051\002\127\002\100\000\103\000\158\002\045\000\094\002\
\123\000\046\000\168\001\079\000\062\002\185\000\096\000\065\002\
\100\000\067\002\068\002\069\002\070\002\242\000\012\002\225\002\
\106\002\123\000\227\002\158\000\192\000\047\000\004\002\079\000\
\114\000\002\002\242\000\012\003\185\000\159\000\086\000\128\001\
\249\000\018\002\136\000\090\002\131\000\097\000\242\000\048\000\
\192\000\160\000\161\000\100\000\128\001\095\002\096\002\099\002\
\194\000\123\001\027\002\124\000\029\002\242\000\031\002\100\000\
\033\002\024\002\247\001\162\000\003\003\100\000\109\002\084\002\
\085\002\158\001\120\000\125\001\194\000\120\000\159\001\101\000\
\045\002\125\000\126\000\046\002\047\002\048\002\058\000\195\000\
\102\000\059\000\104\000\156\002\104\000\104\000\104\000\060\000\
\104\000\120\000\061\000\127\000\253\000\119\002\000\002\066\002\
\234\001\130\002\120\002\195\000\128\001\019\002\103\000\077\000\
\136\002\137\002\138\002\062\000\104\000\072\000\079\002\140\001\
\064\000\065\000\052\002\241\000\081\002\241\000\128\001\022\001\
\104\000\104\000\104\000\077\000\027\001\242\000\029\001\128\001\
\157\002\072\000\124\000\155\000\155\000\216\001\162\002\216\001\
\187\002\058\000\066\000\111\000\059\000\104\000\115\000\055\000\
\081\000\081\000\060\000\081\000\060\002\061\000\234\001\116\000\
\125\000\126\000\104\000\218\001\219\001\218\001\219\001\068\000\
\082\002\147\000\218\001\219\001\116\002\166\000\062\000\081\000\
\117\002\063\000\127\000\064\000\065\000\220\001\254\000\220\001\
\117\000\121\000\186\002\216\001\220\001\131\002\188\002\129\002\
\081\000\179\000\246\000\193\002\246\000\179\000\175\002\196\002\
\001\000\002\000\003\000\004\000\005\000\066\000\122\000\242\000\
\216\001\218\001\219\001\242\000\242\000\145\002\146\002\242\000\
\208\002\123\000\128\000\154\002\209\002\210\002\067\000\065\000\
\213\002\065\000\068\000\220\001\129\000\111\002\218\001\219\001\
\131\000\140\000\114\002\099\000\145\000\099\000\099\000\099\000\
\143\001\099\000\148\000\002\001\231\002\232\002\233\002\160\000\
\220\001\160\000\176\002\160\000\151\000\160\000\099\000\152\000\
\160\000\124\000\080\001\242\000\081\001\099\000\082\001\103\000\
\156\000\103\000\103\000\103\000\251\002\103\000\043\001\252\002\
\045\001\099\000\099\000\099\000\099\000\099\000\153\000\125\000\
\126\000\154\000\126\002\158\000\128\002\004\003\155\000\157\000\
\165\000\103\000\008\003\009\003\010\003\159\000\099\000\167\000\
\168\000\127\000\169\000\172\000\176\000\103\000\103\000\103\000\
\001\001\160\000\161\000\099\000\177\000\178\000\254\002\179\000\
\180\000\188\000\171\001\189\000\018\003\019\003\020\003\221\002\
\135\000\179\002\135\000\162\000\135\000\190\000\135\000\228\002\
\200\000\135\000\191\000\158\000\028\003\029\003\195\000\103\000\
\192\000\004\001\196\000\238\002\163\000\159\000\197\000\034\003\
\201\000\217\000\135\000\202\000\218\000\219\000\220\000\221\000\
\222\000\160\000\161\000\223\000\147\000\255\002\250\000\253\000\
\009\001\253\000\000\003\253\000\253\000\253\000\253\000\253\000\
\253\000\253\000\007\001\162\000\146\000\253\000\253\000\253\000\
\253\000\253\000\253\000\203\000\204\000\205\000\206\000\025\002\
\011\001\253\000\253\000\014\001\013\001\020\001\207\000\253\000\
\208\000\158\000\209\000\021\001\135\000\024\001\025\001\210\000\
\253\000\253\000\163\000\159\000\253\000\253\000\211\000\041\001\
\026\001\026\003\042\001\174\000\025\003\056\001\144\001\160\000\
\161\000\071\001\253\000\078\001\163\000\009\001\163\000\253\000\
\163\000\079\001\163\000\035\003\072\001\163\000\037\003\124\000\
\253\000\162\000\101\001\212\000\103\001\241\000\104\001\253\000\
\253\000\254\000\254\000\254\000\105\001\254\000\254\000\254\000\
\254\000\254\000\254\000\254\000\106\001\125\000\126\000\254\000\
\254\000\254\000\254\000\254\000\213\000\107\001\112\001\113\001\
\114\001\129\001\138\001\254\000\254\000\132\001\130\001\127\000\
\006\001\254\000\131\001\139\000\133\001\139\000\134\001\139\000\
\142\001\139\000\254\000\145\001\139\000\126\000\254\000\254\000\
\146\001\147\001\172\001\152\001\154\001\162\001\167\001\163\001\
\141\002\166\000\206\002\169\001\254\000\139\000\002\001\002\001\
\002\001\254\000\002\001\002\001\002\001\002\001\002\001\002\001\
\002\001\216\001\254\000\216\001\002\001\002\001\002\001\002\001\
\002\001\254\000\254\000\003\001\161\000\174\001\175\001\177\001\
\002\001\002\001\062\001\063\001\184\001\064\001\002\001\218\001\
\219\001\218\001\219\001\065\001\185\001\187\001\066\001\188\001\
\189\001\190\001\191\001\002\001\002\001\193\001\206\001\139\000\
\194\001\220\001\197\001\220\001\014\001\201\001\221\001\067\001\
\202\001\002\001\198\001\001\001\001\001\001\001\002\001\001\001\
\001\001\001\001\001\001\001\001\001\001\001\001\199\001\002\001\
\212\001\001\001\001\001\001\001\001\001\001\001\002\001\002\001\
\167\002\213\001\214\001\215\001\222\001\001\001\001\001\223\001\
\226\001\230\001\216\001\001\001\004\001\004\001\004\001\231\001\
\004\001\004\001\004\001\004\001\004\001\004\001\004\001\011\001\
\001\001\001\001\004\001\004\001\004\001\004\001\004\001\232\001\
\218\001\219\001\234\001\239\001\244\001\254\001\004\001\004\001\
\255\001\002\002\006\002\001\001\004\001\007\002\008\002\135\001\
\028\002\013\002\220\001\017\002\001\001\020\002\021\002\022\002\
\008\001\004\001\004\001\001\001\001\001\023\002\026\002\013\001\
\013\001\013\001\032\002\013\001\013\001\013\001\013\001\013\001\
\013\001\013\001\030\002\034\002\004\001\013\001\013\001\013\001\
\013\001\013\001\036\002\039\002\168\002\004\001\037\002\043\002\
\041\002\013\001\013\001\049\002\004\001\004\001\216\001\013\001\
\009\001\009\001\009\001\053\002\009\001\009\001\009\001\009\001\
\009\001\009\001\009\001\012\001\013\001\013\001\009\001\009\001\
\009\001\009\001\009\001\058\002\218\001\219\001\050\002\059\002\
\063\002\064\002\009\001\009\001\071\002\073\002\075\002\013\001\
\009\001\072\002\105\002\077\002\080\002\083\002\220\001\087\002\
\013\001\086\002\089\002\091\002\018\001\009\001\009\001\013\001\
\013\001\124\000\092\002\006\001\006\001\006\001\100\002\006\001\
\006\001\006\001\006\001\006\001\006\001\006\001\101\002\118\002\
\009\001\006\001\006\001\006\001\006\001\006\001\113\002\125\000\
\126\000\009\001\112\002\108\002\115\002\006\001\006\001\123\002\
\009\001\009\001\125\002\006\001\186\000\133\002\134\002\135\002\
\140\002\127\000\147\002\155\002\219\001\159\002\166\002\017\001\
\006\001\006\001\160\002\169\002\170\002\172\002\003\001\003\001\
\003\001\171\002\003\001\003\001\003\001\003\001\003\001\003\001\
\003\001\173\002\181\002\006\001\003\001\003\001\003\001\003\001\
\003\001\182\002\183\002\190\002\006\001\184\002\192\002\194\002\
\003\001\003\001\195\002\006\001\006\001\216\001\003\001\014\001\
\014\001\014\001\197\002\014\001\014\001\014\001\014\001\014\001\
\014\001\014\001\005\001\003\001\003\001\014\001\014\001\014\001\
\014\001\014\001\199\002\218\001\219\001\198\002\200\002\201\002\
\202\002\014\001\014\001\203\002\204\002\207\002\003\001\014\001\
\220\002\224\002\226\002\239\002\230\002\220\001\235\002\003\001\
\241\002\245\002\002\003\010\001\014\001\014\001\003\001\003\001\
\007\003\163\002\011\001\011\001\011\001\011\003\011\001\011\001\
\011\001\011\001\011\001\011\001\011\001\014\003\017\003\014\001\
\011\001\011\001\011\001\011\001\011\001\039\000\028\001\191\002\
\014\001\029\001\032\001\109\000\011\001\011\001\037\001\014\001\
\014\001\216\001\011\001\008\001\008\001\008\001\079\000\008\001\
\008\001\008\001\008\001\008\001\008\001\008\001\007\001\011\001\
\011\001\008\001\008\001\008\001\008\001\008\001\143\000\218\001\
\219\001\115\000\113\000\057\000\107\000\008\001\008\001\092\000\
\181\000\141\000\011\001\008\001\169\000\055\000\094\000\149\000\
\167\000\220\001\023\001\011\001\241\000\082\000\021\001\016\001\
\008\001\008\001\011\001\011\001\082\000\200\000\012\001\012\001\
\012\001\248\000\012\001\012\001\012\001\012\001\012\001\012\001\
\012\001\175\000\039\000\008\001\012\001\012\001\012\001\012\001\
\012\001\147\000\074\000\215\002\008\001\069\000\145\000\173\000\
\012\001\012\001\171\000\008\001\008\001\216\001\012\001\018\001\
\018\001\018\001\246\000\018\001\018\001\018\001\018\001\018\001\
\018\001\018\001\015\001\012\001\012\001\018\001\018\001\018\001\
\018\001\018\001\107\002\218\001\219\001\149\001\085\001\247\000\
\225\001\018\001\018\001\109\001\183\001\102\001\012\001\018\001\
\244\002\229\002\014\002\240\002\209\000\220\001\251\000\012\001\
\030\001\157\001\044\002\013\003\018\001\018\001\012\001\012\001\
\216\001\038\003\017\001\017\001\017\001\040\002\017\001\017\001\
\017\001\017\001\017\001\017\001\017\001\161\002\165\002\018\001\
\017\001\017\001\017\001\017\001\017\001\244\000\218\001\219\001\
\018\001\132\002\245\000\000\000\017\001\017\001\000\000\018\001\
\018\001\000\000\017\001\000\000\000\000\000\000\000\000\000\000\
\220\001\000\000\000\000\000\000\000\000\000\000\000\000\017\001\
\017\001\000\000\000\000\000\000\000\000\005\001\005\001\005\001\
\000\000\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\000\000\000\000\017\001\005\001\005\001\005\001\005\001\082\000\
\000\000\000\000\022\003\017\001\000\000\000\000\000\000\005\001\
\005\001\000\000\017\001\017\001\216\001\005\001\010\001\010\001\
\010\001\000\000\010\001\010\001\010\001\010\001\010\001\010\001\
\010\001\000\000\005\001\005\001\010\001\010\001\010\001\010\001\
\206\000\000\000\218\001\219\001\000\000\000\000\000\000\000\000\
\010\001\010\001\000\000\000\000\000\000\005\001\010\001\000\000\
\000\000\000\000\000\000\000\000\220\001\000\000\005\001\000\000\
\000\000\000\000\000\000\010\001\010\001\005\001\005\001\000\000\
\000\000\007\001\007\001\007\001\000\000\007\001\007\001\007\001\
\007\001\007\001\007\001\007\001\000\000\000\000\010\001\007\001\
\007\001\007\001\007\001\082\000\000\000\000\000\000\000\010\001\
\000\000\000\000\000\000\007\001\007\001\000\000\010\001\010\001\
\012\001\007\001\016\001\016\001\016\001\000\000\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\000\000\007\001\007\001\
\016\001\016\001\016\001\016\001\236\000\000\000\125\000\126\000\
\000\000\000\000\000\000\000\000\016\001\016\001\000\000\000\000\
\000\000\007\001\016\001\000\000\000\000\000\000\000\000\000\000\
\127\000\000\000\007\001\000\000\000\000\000\000\000\000\016\001\
\016\001\007\001\007\001\000\000\000\000\015\001\015\001\015\001\
\000\000\015\001\015\001\015\001\015\001\015\001\015\001\015\001\
\000\000\000\000\016\001\015\001\015\001\015\001\015\001\207\000\
\000\000\000\000\000\000\016\001\110\002\000\000\000\000\015\001\
\015\001\209\000\016\001\016\001\209\000\015\001\209\000\209\000\
\209\000\209\000\000\000\158\000\000\000\209\000\209\000\209\000\
\000\000\209\000\015\001\015\001\043\000\159\000\000\000\044\000\
\229\000\209\000\209\000\158\000\000\000\178\002\000\000\209\000\
\080\000\160\000\161\000\046\000\246\001\015\001\216\001\000\000\
\000\000\000\000\158\000\000\000\209\000\209\000\015\001\000\000\
\000\000\160\000\161\000\162\000\159\000\015\001\015\001\047\000\
\000\000\000\000\223\002\000\000\218\001\219\001\000\000\209\000\
\160\000\161\000\199\000\162\000\000\000\000\000\000\000\158\000\
\209\000\048\000\000\000\224\000\000\000\241\000\220\001\209\000\
\209\000\159\000\162\000\082\000\082\000\000\000\000\000\082\000\
\082\000\082\000\082\000\082\000\082\000\160\000\161\000\000\000\
\082\000\082\000\082\000\010\001\082\000\000\000\000\000\088\000\
\000\000\000\000\088\000\000\000\082\000\082\000\000\000\162\000\
\124\000\000\000\082\000\088\000\206\000\206\000\088\000\000\000\
\206\000\206\000\206\000\206\000\206\000\206\000\221\000\082\000\
\082\000\206\000\206\000\206\000\000\000\206\000\125\000\126\000\
\000\000\000\000\088\000\000\000\000\000\206\000\206\000\158\000\
\000\000\000\000\082\000\206\000\000\000\000\000\173\000\000\000\
\127\000\159\000\000\000\082\000\088\000\000\000\000\000\235\000\
\206\000\206\000\082\000\082\000\000\000\160\000\161\000\000\000\
\082\000\000\000\000\000\082\000\082\000\082\000\082\000\082\000\
\082\000\000\000\000\000\206\000\082\000\082\000\082\000\162\000\
\082\000\000\000\000\000\183\000\206\000\000\000\183\000\000\000\
\082\000\082\000\000\000\206\000\206\000\000\000\082\000\183\000\
\236\000\236\000\183\000\000\000\236\000\000\000\236\000\236\000\
\236\000\236\000\238\000\082\000\082\000\236\000\236\000\236\000\
\000\000\236\000\000\000\000\000\002\002\000\000\183\000\000\000\
\000\000\236\000\236\000\158\000\000\000\000\000\082\000\236\000\
\000\000\216\001\176\001\144\002\000\000\159\000\000\000\082\000\
\183\000\000\000\000\000\239\000\236\000\236\000\082\000\082\000\
\216\001\160\000\161\000\207\000\207\000\000\000\000\000\218\001\
\219\001\207\000\207\000\207\000\207\000\000\000\000\000\236\000\
\207\000\207\000\207\000\162\000\207\000\000\000\218\001\219\001\
\236\000\220\001\000\000\000\000\207\000\207\000\000\000\236\000\
\236\000\216\001\207\000\000\000\229\000\229\000\000\000\000\000\
\220\001\000\000\229\000\229\000\229\000\229\000\240\000\207\000\
\207\000\229\000\229\000\229\000\000\000\229\000\000\000\218\001\
\219\001\000\000\000\000\000\000\000\000\229\000\229\000\124\000\
\000\000\000\000\207\000\229\000\000\000\000\000\175\000\000\000\
\000\000\220\001\000\000\207\000\000\000\000\000\000\000\237\000\
\229\000\229\000\207\000\207\000\015\003\125\000\126\000\224\000\
\224\000\000\000\000\000\224\000\000\000\224\000\224\000\057\002\
\224\000\216\001\000\000\229\000\224\000\224\000\224\000\127\000\
\224\000\000\000\125\000\126\000\229\000\000\000\000\000\000\000\
\224\000\224\000\058\000\229\000\229\000\059\000\224\000\218\001\
\219\001\240\000\000\000\060\000\127\000\000\000\141\000\000\000\
\000\000\000\000\000\000\224\000\224\000\000\000\000\000\000\000\
\000\000\220\001\221\000\221\000\000\000\000\000\221\000\062\000\
\221\000\221\000\063\000\221\000\064\000\065\000\224\000\221\000\
\221\000\221\000\000\000\221\000\000\000\000\000\000\000\224\000\
\000\000\000\000\000\000\221\000\221\000\000\000\224\000\224\000\
\000\000\221\000\000\000\235\000\235\000\000\000\066\000\000\000\
\000\000\235\000\235\000\235\000\235\000\000\000\221\000\221\000\
\235\000\235\000\235\000\000\000\235\000\189\002\216\001\067\000\
\000\000\000\000\000\000\068\000\235\000\235\000\124\000\000\000\
\000\000\221\000\235\000\000\000\000\000\178\001\000\000\000\000\
\000\000\000\000\221\000\000\000\218\001\219\001\000\000\235\000\
\235\000\221\000\221\000\000\000\125\000\126\000\238\000\238\000\
\000\000\000\000\238\000\000\000\238\000\238\000\220\001\238\000\
\000\000\000\000\235\000\238\000\238\000\238\000\127\000\238\000\
\000\000\000\000\000\000\235\000\000\000\000\000\000\000\238\000\
\238\000\000\000\235\000\235\000\216\001\238\000\000\000\239\000\
\239\000\000\000\000\000\217\001\000\000\239\000\239\000\239\000\
\239\000\036\003\238\000\238\000\239\000\239\000\239\000\000\000\
\239\000\000\000\218\001\219\001\000\000\000\000\000\000\000\000\
\239\000\239\000\000\000\000\000\000\000\238\000\239\000\125\000\
\126\000\000\000\000\000\000\000\220\001\000\000\238\000\000\000\
\000\000\000\000\000\000\239\000\239\000\238\000\238\000\124\000\
\000\000\127\000\240\000\240\000\000\000\000\000\240\000\000\000\
\240\000\240\000\240\000\240\000\000\000\000\000\239\000\240\000\
\240\000\240\000\057\001\058\001\059\001\125\000\126\000\239\000\
\000\000\000\000\000\000\240\000\240\000\000\000\239\000\239\000\
\000\000\240\000\000\000\237\000\237\000\000\000\000\000\127\000\
\000\000\237\000\237\000\237\000\237\000\000\000\240\000\240\000\
\237\000\237\000\237\000\000\000\237\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\237\000\237\000\000\000\000\000\
\000\000\240\000\237\000\000\000\000\000\000\000\005\003\216\001\
\000\000\000\000\240\000\000\000\000\000\240\000\240\000\237\000\
\237\000\240\000\240\000\240\000\240\000\240\000\240\000\000\000\
\000\000\000\000\240\000\240\000\240\000\218\001\219\001\000\000\
\006\003\216\001\237\000\000\000\000\000\058\000\240\000\240\000\
\059\000\000\000\000\000\237\000\240\000\000\000\060\000\220\001\
\000\000\141\000\237\000\237\000\000\000\000\000\000\000\218\001\
\219\001\240\000\240\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\000\000\000\000\064\000\
\065\000\220\001\000\000\224\000\240\000\000\000\000\000\135\001\
\000\000\225\000\226\000\227\000\228\000\240\000\000\000\000\000\
\229\000\230\000\231\000\000\000\240\000\240\000\000\000\000\000\
\224\000\066\000\000\000\000\000\000\000\232\000\225\000\226\000\
\227\000\228\000\233\000\000\000\000\000\229\000\230\000\231\000\
\021\003\216\001\000\000\000\000\000\000\224\000\068\000\234\000\
\235\000\000\000\232\000\225\000\226\000\227\000\120\001\233\000\
\000\000\000\000\229\000\230\000\231\000\000\000\000\000\218\001\
\219\001\000\000\236\000\000\000\234\000\235\000\000\000\232\000\
\000\000\000\000\000\000\237\000\233\000\032\003\216\001\000\000\
\000\000\220\001\238\000\239\000\000\000\000\000\000\000\236\000\
\000\000\234\000\235\000\000\000\000\000\138\000\000\000\138\000\
\237\000\138\000\000\000\138\000\218\001\219\001\138\000\238\000\
\239\000\158\000\000\000\122\000\236\000\122\000\000\000\122\000\
\138\000\122\000\000\000\159\000\122\000\237\000\220\001\138\000\
\000\000\000\000\138\000\000\000\238\000\239\000\122\000\160\000\
\161\000\000\000\000\000\000\000\216\001\122\000\138\000\138\000\
\122\000\000\000\134\000\185\002\134\000\000\000\134\000\000\000\
\134\000\162\000\000\000\134\000\122\000\122\000\000\000\000\000\
\138\000\000\000\218\001\219\001\000\000\134\000\000\000\126\000\
\000\000\126\000\000\000\126\000\134\000\126\000\122\000\134\000\
\126\000\138\000\000\000\000\000\220\001\000\000\000\000\000\000\
\000\000\000\000\000\000\134\000\134\000\000\000\000\000\122\000\
\000\000\126\000\000\000\000\000\126\000\099\000\000\000\007\000\
\008\000\009\000\010\000\000\000\099\000\134\000\011\000\012\000\
\126\000\000\000\013\000\014\000\015\000\016\000\017\000\000\000\
\018\000\000\000\000\000\099\000\099\000\000\000\134\000\019\000\
\000\000\000\000\126\000\020\000\021\000\000\000\000\000\000\000\
\000\000\022\000\023\000\000\000\024\000\099\000\000\000\025\000\
\026\000\027\000\028\000\126\000\000\000\029\000\000\000\000\000\
\030\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000"

let yycheck = "\005\000\
\002\000\009\000\054\000\000\000\056\000\190\000\129\001\000\000\
\000\000\189\000\016\000\232\000\112\000\113\000\147\000\004\001\
\016\000\021\000\000\000\174\002\024\000\025\000\113\000\202\002\
\027\001\009\001\072\001\013\000\136\000\015\000\013\001\115\001\
\131\001\019\000\013\001\004\001\178\002\251\001\013\001\139\000\
\013\001\174\000\035\001\095\000\096\000\006\001\179\000\053\000\
\139\000\055\000\008\002\030\001\004\001\000\000\006\001\030\001\
\249\000\046\001\002\003\028\001\004\001\027\001\170\000\196\000\
\025\001\051\000\001\001\013\001\061\001\004\001\003\001\074\001\
\005\001\017\003\007\001\010\001\009\001\012\000\013\001\012\001\
\015\000\223\002\088\000\206\001\019\001\087\000\086\000\071\001\
\011\003\212\001\063\001\080\001\200\000\201\000\046\001\030\001\
\029\001\209\002\210\002\032\001\035\001\036\001\046\001\082\001\
\041\001\217\002\064\002\082\001\074\001\004\001\199\000\117\000\
\004\001\022\001\006\001\223\000\122\000\123\000\124\000\125\000\
\126\000\127\000\004\001\207\001\224\000\059\001\091\001\131\000\
\080\001\062\001\230\000\030\003\232\000\224\000\013\001\044\001\
\045\001\013\001\184\001\230\000\064\001\241\000\231\000\243\000\
\243\001\006\001\079\001\026\001\083\001\084\001\241\000\046\001\
\243\000\062\001\046\001\157\000\003\001\013\003\001\002\163\000\
\009\001\004\001\045\001\009\001\046\001\003\001\168\000\010\002\
\029\001\171\000\176\000\173\000\000\002\175\000\178\000\022\001\
\068\001\177\000\003\001\007\002\005\001\012\001\007\001\044\001\
\009\001\032\001\012\001\012\001\080\001\191\000\192\000\029\001\
\075\001\039\001\023\001\197\000\045\001\044\001\045\001\000\000\
\202\000\062\001\156\000\046\001\029\001\140\000\007\001\032\001\
\039\001\013\001\014\001\165\000\013\001\039\001\004\001\062\001\
\009\001\152\000\004\001\221\000\155\000\156\000\022\001\158\000\
\159\000\160\000\161\000\162\000\057\001\022\001\165\000\060\001\
\060\002\013\001\030\001\063\002\029\001\172\000\028\001\032\001\
\117\001\118\001\003\001\029\001\044\001\045\001\232\000\091\001\
\013\001\039\002\009\001\044\001\045\001\082\001\079\001\008\001\
\046\001\090\001\015\001\055\001\017\001\022\001\012\001\009\001\
\188\001\011\001\006\001\008\001\014\001\062\001\029\001\032\001\
\059\001\009\001\009\001\022\001\029\001\025\001\026\001\123\001\
\113\001\114\001\008\001\044\001\045\001\008\001\079\001\083\001\
\022\001\029\001\027\001\135\001\125\001\003\001\029\001\005\001\
\013\001\044\001\045\001\009\001\135\001\062\001\169\002\070\001\
\044\001\138\001\029\001\057\001\058\001\059\001\044\001\045\001\
\003\001\156\002\005\001\006\001\007\001\003\001\009\001\005\001\
\009\001\007\001\062\001\009\001\006\001\192\002\012\001\170\002\
\118\002\172\002\004\001\208\001\078\001\079\001\071\001\013\001\
\022\001\074\001\029\001\013\001\029\001\008\001\004\001\029\001\
\000\000\024\001\032\001\029\001\022\001\004\001\041\001\042\001\
\043\001\044\001\021\001\101\001\152\001\013\001\044\001\045\001\
\022\001\091\001\001\001\005\001\207\002\004\001\008\001\022\001\
\211\002\202\001\043\002\062\001\000\000\082\002\013\001\252\001\
\062\001\016\001\005\001\009\001\213\001\006\001\013\001\216\001\
\075\001\218\001\219\001\220\001\221\001\022\001\140\001\181\002\
\013\002\079\001\184\002\022\001\009\001\036\001\006\001\029\001\
\041\001\009\001\246\001\246\002\029\001\032\001\039\001\251\001\
\003\001\155\001\004\001\246\001\006\001\013\001\002\002\054\001\
\029\001\044\001\045\001\044\001\008\002\254\001\255\001\002\002\
\009\001\004\001\172\001\022\001\174\001\017\002\176\001\013\001\
\178\001\163\001\013\001\062\001\226\002\062\001\017\002\055\001\
\056\001\013\001\006\001\022\001\029\001\009\001\018\001\013\001\
\194\001\044\001\045\001\197\001\198\001\199\001\001\001\009\001\
\013\001\004\001\003\001\080\002\005\001\006\001\007\001\010\001\
\009\001\029\001\013\001\062\001\000\000\013\001\004\001\217\001\
\006\001\050\002\018\001\029\001\064\002\156\001\013\001\009\001\
\057\002\058\002\059\002\030\001\029\001\009\001\234\001\003\001\
\035\001\036\001\003\001\003\001\003\001\005\001\082\002\146\000\
\041\001\042\001\043\001\029\001\151\000\089\002\153\000\091\002\
\081\002\029\001\022\001\028\001\029\001\022\001\089\002\022\001\
\133\002\001\001\061\001\013\001\004\001\062\001\009\001\015\002\
\006\001\007\001\010\001\009\001\004\001\013\001\006\001\056\001\
\044\001\045\001\075\001\044\001\045\001\044\001\045\001\082\001\
\003\001\046\001\044\001\045\001\030\002\050\001\030\001\029\001\
\034\002\033\001\062\001\035\001\036\001\062\001\000\000\062\001\
\006\001\004\001\131\002\022\001\062\001\003\001\135\002\049\002\
\046\001\005\001\003\001\140\002\005\001\009\001\106\002\144\002\
\001\000\002\000\003\000\004\000\005\000\061\001\004\001\163\002\
\022\001\044\001\045\001\167\002\168\002\071\002\072\002\171\002\
\163\002\004\001\004\001\077\002\167\002\168\002\078\001\007\001\
\171\002\009\001\082\001\062\001\013\001\020\002\044\001\045\001\
\006\001\006\001\025\002\003\001\013\001\005\001\006\001\007\001\
\005\001\009\001\013\001\000\000\189\002\190\002\191\002\003\001\
\062\001\005\001\108\002\007\001\004\001\009\001\022\001\004\001\
\012\001\022\001\013\001\215\002\015\001\029\001\017\001\003\001\
\009\001\005\001\006\001\007\001\215\002\009\001\167\000\216\002\
\169\000\041\001\042\001\043\001\044\001\045\001\004\001\044\001\
\045\001\013\001\042\002\022\001\044\002\230\002\004\001\029\001\
\009\001\029\001\235\002\236\002\237\002\032\001\062\001\009\001\
\029\001\062\001\003\001\009\001\009\001\041\001\042\001\043\001\
\000\000\044\001\045\001\075\001\003\001\003\001\218\002\046\001\
\013\001\013\001\005\001\004\001\005\003\006\003\007\003\177\002\
\003\001\112\002\005\001\062\001\007\001\009\001\009\001\185\002\
\004\001\012\001\029\001\022\001\021\003\022\003\022\001\075\001\
\029\001\000\000\046\001\197\002\079\001\032\001\029\001\032\003\
\004\001\013\001\029\001\029\001\013\001\013\001\013\001\029\001\
\009\001\044\001\045\001\004\001\046\001\219\002\005\001\003\001\
\029\001\005\001\220\002\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\009\001\062\001\004\001\017\001\018\001\019\001\
\020\001\021\001\022\001\002\001\003\001\004\001\005\001\012\001\
\029\001\029\001\030\001\029\001\000\000\005\001\013\001\035\001\
\015\001\022\001\017\001\006\001\079\001\022\001\046\001\022\001\
\044\001\045\001\079\001\032\001\048\001\049\001\029\001\004\001\
\046\001\015\003\013\001\046\001\014\003\009\001\005\001\044\001\
\045\001\017\001\062\001\029\001\003\001\000\000\005\001\067\001\
\007\001\029\001\009\001\033\003\022\001\012\001\036\003\022\001\
\076\001\062\001\071\001\058\001\009\001\081\001\022\001\083\001\
\084\001\003\001\004\001\005\001\022\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\022\001\044\001\045\001\017\001\
\018\001\019\001\020\001\021\001\083\001\022\001\013\001\004\001\
\004\001\013\001\081\001\029\001\030\001\013\001\017\001\062\001\
\000\000\035\001\017\001\003\001\013\001\005\001\013\001\007\001\
\005\001\009\001\044\001\005\001\012\001\045\001\048\001\049\001\
\003\001\007\001\029\001\005\001\005\001\005\001\005\001\003\001\
\005\001\050\001\005\001\005\001\062\001\029\001\003\001\004\001\
\005\001\067\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\022\001\076\001\022\001\017\001\018\001\019\001\020\001\
\021\001\083\001\084\001\000\000\045\001\029\001\005\001\053\001\
\029\001\030\001\001\001\002\001\006\001\004\001\035\001\044\001\
\045\001\044\001\045\001\010\001\013\001\013\001\013\001\004\001\
\013\001\003\001\005\001\048\001\049\001\005\001\013\001\079\001\
\029\001\062\001\029\001\062\001\000\000\005\001\081\001\030\001\
\006\001\062\001\029\001\003\001\004\001\005\001\067\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\029\001\076\001\
\013\001\017\001\018\001\019\001\020\001\021\001\083\001\084\001\
\012\001\004\001\013\001\013\001\005\001\029\001\030\001\005\001\
\015\001\015\001\022\001\035\001\003\001\004\001\005\001\015\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\048\001\049\001\017\001\018\001\019\001\020\001\021\001\005\001\
\044\001\045\001\006\001\013\001\070\001\039\001\029\001\030\001\
\022\001\009\001\068\001\067\001\035\001\004\001\004\001\008\001\
\005\001\046\001\062\001\022\001\076\001\022\001\017\001\007\001\
\000\000\048\001\049\001\083\001\084\001\048\001\048\001\003\001\
\004\001\005\001\054\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\029\001\029\001\067\001\017\001\018\001\019\001\
\020\001\021\001\005\001\022\001\012\001\076\001\006\001\012\001\
\048\001\029\001\030\001\029\001\083\001\084\001\022\001\035\001\
\003\001\004\001\005\001\005\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\000\000\048\001\049\001\017\001\018\001\
\019\001\020\001\021\001\039\001\044\001\045\001\022\001\022\001\
\004\001\004\001\029\001\030\001\070\001\006\001\006\001\067\001\
\035\001\029\001\007\001\029\001\046\001\005\001\062\001\003\001\
\076\001\007\001\013\001\003\001\000\000\048\001\049\001\083\001\
\084\001\022\001\005\001\003\001\004\001\005\001\013\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\013\001\003\001\
\067\001\017\001\018\001\019\001\020\001\021\001\017\001\044\001\
\045\001\076\001\022\001\029\001\017\001\029\001\030\001\005\001\
\083\001\084\001\017\001\035\001\028\001\046\001\005\001\009\001\
\009\001\062\001\013\001\007\001\045\001\013\001\005\001\000\000\
\048\001\049\001\013\001\005\001\007\001\005\001\003\001\004\001\
\005\001\077\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\005\001\022\001\067\001\017\001\018\001\019\001\020\001\
\021\001\017\001\007\001\012\001\076\001\012\001\005\001\005\001\
\029\001\030\001\005\001\083\001\084\001\022\001\035\001\003\001\
\004\001\005\001\071\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\048\001\049\001\017\001\018\001\019\001\
\020\001\021\001\009\001\044\001\045\001\022\001\007\001\022\001\
\022\001\029\001\030\001\009\001\007\001\005\001\067\001\035\001\
\029\001\007\001\022\001\015\001\009\001\062\001\009\001\076\001\
\015\001\071\001\009\001\000\000\048\001\049\001\083\001\084\001\
\009\001\021\001\003\001\004\001\005\001\003\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\029\001\009\001\067\001\
\017\001\018\001\019\001\020\001\021\001\000\000\000\000\012\001\
\076\001\000\000\000\000\005\001\029\001\030\001\000\000\083\001\
\084\001\022\001\035\001\003\001\004\001\005\001\029\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\048\001\
\049\001\017\001\018\001\019\001\020\001\021\001\005\001\044\001\
\045\001\029\001\029\001\029\001\005\001\029\001\030\001\005\001\
\005\001\005\001\067\001\035\001\005\001\071\001\005\001\007\001\
\005\001\062\001\005\001\076\001\022\001\046\001\005\001\000\000\
\048\001\049\001\083\001\084\001\009\001\007\001\003\001\004\001\
\005\001\005\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\007\001\071\001\067\001\017\001\018\001\019\001\020\001\
\021\001\007\001\007\001\012\001\076\001\007\001\007\001\007\001\
\029\001\030\001\007\001\083\001\084\001\022\001\035\001\003\001\
\004\001\005\001\115\000\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\048\001\049\001\017\001\018\001\019\001\
\020\001\021\001\015\002\044\001\045\001\010\001\198\000\116\000\
\103\001\029\001\030\001\222\000\060\001\215\000\067\001\035\001\
\203\002\007\001\146\001\199\002\000\000\062\001\121\000\076\001\
\154\000\019\001\193\001\252\002\048\001\049\001\083\001\084\001\
\022\001\037\003\003\001\004\001\005\001\190\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\087\002\091\002\067\001\
\017\001\018\001\019\001\020\001\021\001\114\000\044\001\045\001\
\076\001\052\002\114\000\255\255\029\001\030\001\255\255\083\001\
\084\001\255\255\035\001\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\255\255\255\255\255\255\255\255\255\255\048\001\
\049\001\255\255\255\255\255\255\255\255\003\001\004\001\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\067\001\017\001\018\001\019\001\020\001\000\000\
\255\255\255\255\012\001\076\001\255\255\255\255\255\255\029\001\
\030\001\255\255\083\001\084\001\022\001\035\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\048\001\049\001\017\001\018\001\019\001\020\001\
\000\000\255\255\044\001\045\001\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\067\001\035\001\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\076\001\255\255\
\255\255\255\255\255\255\048\001\049\001\083\001\084\001\255\255\
\255\255\003\001\004\001\005\001\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\067\001\017\001\
\018\001\019\001\020\001\000\000\255\255\255\255\255\255\076\001\
\255\255\255\255\255\255\029\001\030\001\255\255\083\001\084\001\
\022\001\035\001\003\001\004\001\005\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\048\001\049\001\
\017\001\018\001\019\001\020\001\000\000\255\255\044\001\045\001\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\067\001\035\001\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\076\001\255\255\255\255\255\255\255\255\048\001\
\049\001\083\001\084\001\255\255\255\255\003\001\004\001\005\001\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\067\001\017\001\018\001\019\001\020\001\000\000\
\255\255\255\255\255\255\076\001\007\001\255\255\255\255\029\001\
\030\001\005\001\083\001\084\001\008\001\035\001\010\001\011\001\
\012\001\013\001\255\255\022\001\255\255\017\001\018\001\019\001\
\255\255\021\001\048\001\049\001\001\001\032\001\255\255\004\001\
\000\000\029\001\030\001\022\001\255\255\009\001\255\255\035\001\
\013\001\044\001\045\001\016\001\020\001\067\001\022\001\255\255\
\255\255\255\255\022\001\255\255\048\001\049\001\076\001\255\255\
\255\255\044\001\045\001\062\001\032\001\083\001\084\001\036\001\
\255\255\255\255\009\001\255\255\044\001\045\001\255\255\067\001\
\044\001\045\001\070\001\062\001\255\255\255\255\255\255\022\001\
\076\001\054\001\255\255\000\000\255\255\081\001\062\001\083\001\
\084\001\032\001\062\001\004\001\005\001\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\044\001\045\001\255\255\
\017\001\018\001\019\001\009\001\021\001\255\255\255\255\001\001\
\255\255\255\255\004\001\255\255\029\001\030\001\255\255\062\001\
\022\001\255\255\035\001\013\001\004\001\005\001\016\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\048\001\
\049\001\017\001\018\001\019\001\255\255\021\001\044\001\045\001\
\255\255\255\255\036\001\255\255\255\255\029\001\030\001\022\001\
\255\255\255\255\067\001\035\001\255\255\255\255\029\001\255\255\
\062\001\032\001\255\255\076\001\054\001\255\255\255\255\000\000\
\048\001\049\001\083\001\084\001\255\255\044\001\045\001\255\255\
\005\001\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\067\001\017\001\018\001\019\001\062\001\
\021\001\255\255\255\255\001\001\076\001\255\255\004\001\255\255\
\029\001\030\001\255\255\083\001\084\001\255\255\035\001\013\001\
\004\001\005\001\016\001\255\255\008\001\255\255\010\001\011\001\
\012\001\013\001\000\000\048\001\049\001\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\009\001\255\255\036\001\255\255\
\255\255\029\001\030\001\022\001\255\255\255\255\067\001\035\001\
\255\255\022\001\029\001\009\001\255\255\032\001\255\255\076\001\
\054\001\255\255\255\255\000\000\048\001\049\001\083\001\084\001\
\022\001\044\001\045\001\004\001\005\001\255\255\255\255\044\001\
\045\001\010\001\011\001\012\001\013\001\255\255\255\255\067\001\
\017\001\018\001\019\001\062\001\021\001\255\255\044\001\045\001\
\076\001\062\001\255\255\255\255\029\001\030\001\255\255\083\001\
\084\001\022\001\035\001\255\255\004\001\005\001\255\255\255\255\
\062\001\255\255\010\001\011\001\012\001\013\001\000\000\048\001\
\049\001\017\001\018\001\019\001\255\255\021\001\255\255\044\001\
\045\001\255\255\255\255\255\255\255\255\029\001\030\001\022\001\
\255\255\255\255\067\001\035\001\255\255\255\255\029\001\255\255\
\255\255\062\001\255\255\076\001\255\255\255\255\255\255\000\000\
\048\001\049\001\083\001\084\001\022\001\044\001\045\001\004\001\
\005\001\255\255\255\255\008\001\255\255\010\001\011\001\020\001\
\013\001\022\001\255\255\067\001\017\001\018\001\019\001\062\001\
\021\001\255\255\044\001\045\001\076\001\255\255\255\255\255\255\
\029\001\030\001\001\001\083\001\084\001\004\001\035\001\044\001\
\045\001\000\000\255\255\010\001\062\001\255\255\013\001\255\255\
\255\255\255\255\255\255\048\001\049\001\255\255\255\255\255\255\
\255\255\062\001\004\001\005\001\255\255\255\255\008\001\030\001\
\010\001\011\001\033\001\013\001\035\001\036\001\067\001\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\255\255\076\001\
\255\255\255\255\255\255\029\001\030\001\255\255\083\001\084\001\
\255\255\035\001\255\255\004\001\005\001\255\255\061\001\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\048\001\049\001\
\017\001\018\001\019\001\255\255\021\001\021\001\022\001\078\001\
\255\255\255\255\255\255\082\001\029\001\030\001\022\001\255\255\
\255\255\067\001\035\001\255\255\255\255\029\001\255\255\255\255\
\255\255\255\255\076\001\255\255\044\001\045\001\255\255\048\001\
\049\001\083\001\084\001\255\255\044\001\045\001\004\001\005\001\
\255\255\255\255\008\001\255\255\010\001\011\001\062\001\013\001\
\255\255\255\255\067\001\017\001\018\001\019\001\062\001\021\001\
\255\255\255\255\255\255\076\001\255\255\255\255\255\255\029\001\
\030\001\255\255\083\001\084\001\022\001\035\001\255\255\004\001\
\005\001\255\255\255\255\029\001\255\255\010\001\011\001\012\001\
\013\001\022\001\048\001\049\001\017\001\018\001\019\001\255\255\
\021\001\255\255\044\001\045\001\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\067\001\035\001\044\001\
\045\001\255\255\255\255\255\255\062\001\255\255\076\001\255\255\
\255\255\255\255\255\255\048\001\049\001\083\001\084\001\022\001\
\255\255\062\001\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\011\001\012\001\013\001\255\255\255\255\067\001\017\001\
\018\001\019\001\041\001\042\001\043\001\044\001\045\001\076\001\
\255\255\255\255\255\255\029\001\030\001\255\255\083\001\084\001\
\255\255\035\001\255\255\004\001\005\001\255\255\255\255\062\001\
\255\255\010\001\011\001\012\001\013\001\255\255\048\001\049\001\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\067\001\035\001\255\255\255\255\255\255\021\001\022\001\
\255\255\255\255\076\001\255\255\255\255\004\001\005\001\048\001\
\049\001\083\001\084\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\017\001\018\001\019\001\044\001\045\001\255\255\
\021\001\022\001\067\001\255\255\255\255\001\001\029\001\030\001\
\004\001\255\255\255\255\076\001\035\001\255\255\010\001\062\001\
\255\255\013\001\083\001\084\001\255\255\255\255\255\255\044\001\
\045\001\048\001\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\035\001\
\036\001\062\001\255\255\004\001\067\001\255\255\255\255\008\001\
\255\255\010\001\011\001\012\001\013\001\076\001\255\255\255\255\
\017\001\018\001\019\001\255\255\083\001\084\001\255\255\255\255\
\004\001\061\001\255\255\255\255\255\255\030\001\010\001\011\001\
\012\001\013\001\035\001\255\255\255\255\017\001\018\001\019\001\
\021\001\022\001\255\255\255\255\255\255\004\001\082\001\048\001\
\049\001\255\255\030\001\010\001\011\001\012\001\013\001\035\001\
\255\255\255\255\017\001\018\001\019\001\255\255\255\255\044\001\
\045\001\255\255\067\001\255\255\048\001\049\001\255\255\030\001\
\255\255\255\255\255\255\076\001\035\001\021\001\022\001\255\255\
\255\255\062\001\083\001\084\001\255\255\255\255\255\255\067\001\
\255\255\048\001\049\001\255\255\255\255\003\001\255\255\005\001\
\076\001\007\001\255\255\009\001\044\001\045\001\012\001\083\001\
\084\001\022\001\255\255\003\001\067\001\005\001\255\255\007\001\
\022\001\009\001\255\255\032\001\012\001\076\001\062\001\029\001\
\255\255\255\255\032\001\255\255\083\001\084\001\022\001\044\001\
\045\001\255\255\255\255\255\255\022\001\029\001\044\001\045\001\
\032\001\255\255\003\001\029\001\005\001\255\255\007\001\255\255\
\009\001\062\001\255\255\012\001\044\001\045\001\255\255\255\255\
\062\001\255\255\044\001\045\001\255\255\022\001\255\255\003\001\
\255\255\005\001\255\255\007\001\029\001\009\001\062\001\032\001\
\012\001\079\001\255\255\255\255\062\001\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\255\255\255\255\079\001\
\255\255\029\001\255\255\255\255\032\001\022\001\255\255\023\001\
\024\001\025\001\026\001\255\255\029\001\062\001\030\001\031\001\
\044\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\255\255\255\255\044\001\045\001\255\255\079\001\047\001\
\255\255\255\255\062\001\051\001\052\001\255\255\255\255\255\255\
\255\255\057\001\058\001\255\255\060\001\062\001\255\255\063\001\
\064\001\065\001\066\001\079\001\255\255\069\001\255\255\255\255\
\072\001\073\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\082\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  BARRIER\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  LESS\000\
  GREATER\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  IMPLEMENTATION\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  FOREACH\000\
  DO\000\
  SECRET\000\
  PUBLICVARS\000\
  RANDOM\000\
  LEFTARROW\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  ATIDENT\000\
  STRING\000\
  PROJECTION\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 158 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 1384 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 162 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 1395 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 165 "pitparser.mly"
 ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 1407 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 168 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 1416 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 171 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 1426 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'eqlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 173 "pitparser.mly"
 ( (TEquation(_2, _3)) :: _5 )
# 1435 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 175 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 1443 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 177 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 1452 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 179 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 1462 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 181 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 1471 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 183 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 1480 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 185 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 1489 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 187 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 1499 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 189 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 1508 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 191 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 1518 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 193 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1527 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 195 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1536 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 197 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 1545 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 199 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1554 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 201 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1562 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 203 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1571 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 205 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1579 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 207 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1588 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 209 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1596 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 211 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1604 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 213 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1613 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 215 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1621 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 217 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1631 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 220 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1640 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 223 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1649 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'impllist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 226 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1658 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nemayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 229 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1667 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 231 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1675 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 233 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1687 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 239 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1697 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 241 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1705 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 243 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1715 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 245 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1724 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "pitparser.mly"
        ( [] )
# 1730 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 251 "pitparser.mly"
 ( _1, _3, None )
# 1738 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 253 "pitparser.mly"
 ( _1, _3, Some _4 )
# 1747 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 259 "pitparser.mly"
        ( _1 )
# 1754 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 261 "pitparser.mly"
        ( _1 )
# 1761 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 263 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 1768 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 265 "pitparser.mly"
        ( "*", parse_extent() )
# 1774 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "pitparser.mly"
        ( ".", parse_extent() )
# 1780 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "pitparser.mly"
        ( "set", parse_extent() )
# 1786 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "pitparser.mly"
        ( "insert", parse_extent() )
# 1792 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "pitparser.mly"
        ( "=", parse_extent() )
# 1798 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "pitparser.mly"
        ( ",", parse_extent() )
# 1804 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "pitparser.mly"
        ( "(", parse_extent() )
# 1810 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "pitparser.mly"
        ( ")", parse_extent() )
# 1816 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 283 "pitparser.mly"
        ( [_1] )
# 1823 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 285 "pitparser.mly"
        ( _1 :: _2 )
# 1831 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 289 "pitparser.mly"
 ( [_1] )
# 1838 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 291 "pitparser.mly"
        ( _1 :: _3 )
# 1846 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'impl) in
    Obj.repr(
# 297 "pitparser.mly"
        ( [_1] )
# 1853 "pitparser.ml"
               : 'impllist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'impl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'impllist) in
    Obj.repr(
# 299 "pitparser.mly"
        ( _1 :: _3 )
# 1861 "pitparser.ml"
               : 'impllist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cvtypeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typeoptions) in
    Obj.repr(
# 303 "pitparser.mly"
        ( () )
# 1870 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'functionoptions) in
    Obj.repr(
# 305 "pitparser.mly"
        ( () )
# 1879 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 307 "pitparser.mly"
        ( () )
# 1887 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 309 "pitparser.mly"
        ( () )
# 1895 "pitparser.ml"
               : 'impl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 313 "pitparser.mly"
        ( () )
# 1902 "pitparser.ml"
               : 'cvtypeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 315 "pitparser.mly"
        ( () )
# 1909 "pitparser.ml"
               : 'cvtypeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 319 "pitparser.mly"
        ( [_1] )
# 1916 "pitparser.ml"
               : 'stringlistne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 321 "pitparser.mly"
        ( _1::_3 )
# 1924 "pitparser.ml"
               : 'stringlistne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 325 "pitparser.mly"
        ( _1,_3 )
# 1932 "pitparser.ml"
               : 'typeopt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stringlistne) in
    Obj.repr(
# 327 "pitparser.mly"
        ( ("pred",parse_extent()),_3 )
# 1939 "pitparser.ml"
               : 'typeopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeopt) in
    Obj.repr(
# 331 "pitparser.mly"
        ( [_1] )
# 1946 "pitparser.ml"
               : 'typeoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeoptlist) in
    Obj.repr(
# 333 "pitparser.mly"
        ( _1::_3 )
# 1954 "pitparser.ml"
               : 'typeoptlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeoptlist) in
    Obj.repr(
# 337 "pitparser.mly"
        ( _2 )
# 1961 "pitparser.ml"
               : 'typeoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "pitparser.mly"
        ( [] )
# 1967 "pitparser.ml"
               : 'typeoptions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 343 "pitparser.mly"
        ( _1,_3 )
# 1975 "pitparser.ml"
               : 'funopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funopt) in
    Obj.repr(
# 347 "pitparser.mly"
        ( [_1] )
# 1982 "pitparser.ml"
               : 'funoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'funopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'funoptlist) in
    Obj.repr(
# 349 "pitparser.mly"
        ( _1::_3 )
# 1990 "pitparser.ml"
               : 'funoptlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'funoptlist) in
    Obj.repr(
# 353 "pitparser.mly"
        ( _2 )
# 1997 "pitparser.ml"
               : 'functionoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 355 "pitparser.mly"
        ( [] )
# 2003 "pitparser.ml"
               : 'functionoptions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 361 "pitparser.mly"
        ( _2 )
# 2010 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "pitparser.mly"
        ( [] )
# 2016 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 367 "pitparser.mly"
    ( _1 :: _3 )
# 2024 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 369 "pitparser.mly"
    ( [_1] )
# 2031 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 373 "pitparser.mly"
    ( None )
# 2037 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    Obj.repr(
# 375 "pitparser.mly"
    ( Some [] )
# 2043 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 377 "pitparser.mly"
    ( Some (_2) )
# 2050 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 381 "pitparser.mly"
        ( (_1,_3)::_5 )
# 2059 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 384 "pitparser.mly"
        ( [(_1,_3)] )
# 2067 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 388 "pitparser.mly"
        ( _2 )
# 2074 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 390 "pitparser.mly"
        ( [] )
# 2080 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 394 "pitparser.mly"
        ( _1 )
# 2087 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 396 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 2094 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 401 "pitparser.mly"
        ( _1 )
# 2101 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 403 "pitparser.mly"
        ( [] )
# 2107 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 407 "pitparser.mly"
    ( _1 :: _3 )
# 2115 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 409 "pitparser.mly"
    ( [_1] )
# 2122 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "pitparser.mly"
 ( PFail, parse_extent () )
# 2128 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 417 "pitparser.mly"
        ( PFunApp (_1, _3), parse_extent() )
# 2136 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 419 "pitparser.mly"
        ( PProj (_1,_3), parse_extent() )
# 2144 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 421 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2153 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 424 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 2160 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 426 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2168 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 428 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2176 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 430 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2183 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 432 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2191 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 434 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2199 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 436 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 2209 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 443 "pitparser.mly"
 ( _1 :: _3 )
# 2217 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 445 "pitparser.mly"
 ( [_1] )
# 2224 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 449 "pitparser.mly"
        ( _1 )
# 2231 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "pitparser.mly"
        ( [] )
# 2237 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 457 "pitparser.mly"
    ( (_1, Some _4) )
# 2245 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 459 "pitparser.mly"
    ( (_1, None) )
# 2252 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 463 "pitparser.mly"
    ( _1 :: _3 )
# 2260 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 465 "pitparser.mly"
    ( [_1] )
# 2267 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 471 "pitparser.mly"
    ( _1 :: _3 )
# 2275 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 473 "pitparser.mly"
    ( [_1] )
# 2282 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optpublicvars) in
    Obj.repr(
# 477 "pitparser.mly"
    ( PRealQuery(_1,_2) )
# 2290 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'optpublicvars) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'options) in
    Obj.repr(
# 479 "pitparser.mly"
    ( PQSecret (_2,_3,_4) )
# 2299 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 481 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 2306 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 483 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 2313 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    Obj.repr(
# 487 "pitparser.mly"
    ( [] )
# 2319 "pitparser.ml"
               : 'optpublicvars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 489 "pitparser.mly"
    ( _2 )
# 2326 "pitparser.ml"
               : 'optpublicvars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 493 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 2334 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 495 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 2341 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 497 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 2350 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 499 "pitparser.mly"
        ( PGPhase(("table", parse_extent()), [_3], _6), parse_extent() )
# 2358 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 501 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2366 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 503 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2374 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 505 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2381 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 507 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2389 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 509 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2397 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 511 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2405 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 513 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 2412 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 515 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 2419 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 517 "pitparser.mly"
        ( PGFunApp(("table",parse_extent()), [_3]), parse_extent() )
# 2426 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 519 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 2434 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 521 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 2444 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 526 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 2452 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 528 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 2459 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 530 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 2468 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 534 "pitparser.mly"
 ( _1 :: _3 )
# 2476 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 536 "pitparser.mly"
 ( [_1] )
# 2483 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 540 "pitparser.mly"
        ( _1 )
# 2490 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 542 "pitparser.mly"
        ( [] )
# 2496 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 547 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2505 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 549 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2513 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 551 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2522 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 553 "pitparser.mly"
        ( [(_1, _3)] )
# 2530 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 557 "pitparser.mly"
        ( _1 )
# 2537 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 559 "pitparser.mly"
        ( [] )
# 2543 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 565 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 2552 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 567 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 2562 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 569 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 2570 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 571 "pitparser.mly"
        ( BFNoUnif((("table", parse_extent()),_3,_5), _6) )
# 2579 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 575 "pitparser.mly"
    ( _2 )
# 2586 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 577 "pitparser.mly"
    ( -1 )
# 2592 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 581 "pitparser.mly"
    ( _2 )
# 2599 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 583 "pitparser.mly"
    ( -1 )
# 2605 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 587 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 2613 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 589 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2621 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 591 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 2628 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 593 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 2638 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 598 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 2646 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 600 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 2653 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 602 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 2660 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 604 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 2669 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 609 "pitparser.mly"
 ( _1 :: _3 )
# 2677 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 611 "pitparser.mly"
 ( [_1] )
# 2684 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 615 "pitparser.mly"
        ( _1 )
# 2691 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 617 "pitparser.mly"
        ( [] )
# 2697 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 622 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2706 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 624 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2714 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 626 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2723 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 628 "pitparser.mly"
        ( [(_1, _3)] )
# 2731 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 632 "pitparser.mly"
        ( _1 )
# 2738 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 634 "pitparser.mly"
        ( [] )
# 2744 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 640 "pitparser.mly"
 ( (_1,_3, false) )
# 2752 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    Obj.repr(
# 643 "pitparser.mly"
 ( (_1,_3, true) )
# 2760 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 647 "pitparser.mly"
 ( _1::_3 )
# 2768 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 650 "pitparser.mly"
 ( [_1] )
# 2775 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 654 "pitparser.mly"
        ( _1 )
# 2782 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 656 "pitparser.mly"
        ( [] )
# 2788 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nemayfailvartypeseq) in
    Obj.repr(
# 660 "pitparser.mly"
 ( _2 )
# 2795 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 662 "pitparser.mly"
 ( [] )
# 2801 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 667 "pitparser.mly"
 ( (_2,_3,_5) :: _6 )
# 2811 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 669 "pitparser.mly"
 ( [_2,_3,_5] )
# 2820 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 673 "pitparser.mly"
 ( (_1,_2,_4) :: _5 )
# 2830 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 675 "pitparser.mly"
 ( [_1,_2,_4] )
# 2839 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 679 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 2849 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 681 "pitparser.mly"
 ( [_1,_2,_4] )
# 2858 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 687 "pitparser.mly"
    ( [(_1, _2)] )
# 2866 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 689 "pitparser.mly"
    ( (_1, _2)::_4 )
# 2875 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 695 "pitparser.mly"
        ( PClause(_1,_3) )
# 2883 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 697 "pitparser.mly"
        ( PFact(_1) )
# 2890 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 699 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 2898 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 701 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 2906 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 705 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 2915 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 707 "pitparser.mly"
 ( [_1,_2] )
# 2923 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'progoptlist) in
    Obj.repr(
# 714 "pitparser.mly"
        ( _2 )
# 2930 "pitparser.ml"
               : 'programoptions))
; (fun __caml_parser_env ->
    Obj.repr(
# 716 "pitparser.mly"
        ( [] )
# 2936 "pitparser.ml"
               : 'programoptions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'progopt) in
    Obj.repr(
# 720 "pitparser.mly"
        ( [_1] )
# 2943 "pitparser.ml"
               : 'progoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'progopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'progoptlist) in
    Obj.repr(
# 722 "pitparser.mly"
        ( _1 :: _3 )
# 2951 "pitparser.ml"
               : 'progoptlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 726 "pitparser.mly"
        ( ("Write", _1,_3) )
# 2959 "pitparser.ml"
               : 'progopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 728 "pitparser.mly"
        ( ("Read", _1,_3) )
# 2967 "pitparser.ml"
               : 'progopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'programoptions) in
    Obj.repr(
# 732 "pitparser.mly"
        ((_1,_2))
# 2975 "pitparser.ml"
               : 'progbegin))
; (fun __caml_parser_env ->
    Obj.repr(
# 736 "pitparser.mly"
        (true)
# 2981 "pitparser.ml"
               : 'progend))
; (fun __caml_parser_env ->
    Obj.repr(
# 738 "pitparser.mly"
        (false)
# 2987 "pitparser.ml"
               : 'progend))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'progbegin) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 744 "pitparser.mly"
        ( _2 (* CryptoVerif implementation annotations ignored *) )
# 2995 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 746 "pitparser.mly"
 ( _2 )
# 3002 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 748 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 3009 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 750 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 3017 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 752 "pitparser.mly"
 ( PRepl _2 )
# 3024 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 754 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 3034 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 757 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow "foreach i<=N do P"
             as a synonym for !P *)
          PRepl _6 )
# 3045 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 761 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 3054 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 765 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 3061 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 768 "pitparser.mly"
        ( PRestr(_2, _3, _5, _6) )
# 3071 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 770 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow x <-R T 
	     as a synonym for new x: T *)
          PRestr(_1, None, _3, _4) )
# 3082 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 774 "pitparser.mly"
 ( PTest(_2,_4,_5) )
# 3091 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 776 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 3100 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'progend) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 778 "pitparser.mly"
 ( POutput(_3,_5,_8) )
# 3110 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 780 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 3118 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 782 "pitparser.mly"
 ( PLet(_2,_4,_6,_7) )
# 3128 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 784 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow x[:T] <- M; P
	     as a synonym for let x[:T] = M in P *)
          PLet(_1,_3,_4,PNil) )
# 3139 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 788 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 3147 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 790 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )
# 3159 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 794 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 3168 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 796 "pitparser.mly"
        ( PGet(_2, _4, None, _6, _7) )
# 3178 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 798 "pitparser.mly"
        ( PGet(_2, _4, Some _7, _8, _9) )
# 3189 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 800 "pitparser.mly"
 ( PPar(_1,_3) )
# 3197 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 802 "pitparser.mly"
        ( PEvent(_2, _4, _6, _7) )
# 3207 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 804 "pitparser.mly"
        ( PEvent(_2, [], _3, _4) )
# 3216 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 806 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Phases should be positive integers in processes" (parse_extent());
          PPhase(_2, _3) )
# 3226 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 810 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, None, _3) )
# 3237 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 815 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, Some _4, _6) )
# 3249 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 822 "pitparser.mly"
        ( _2 )
# 3256 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 824 "pitparser.mly"
        ( PNil )
# 3262 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 828 "pitparser.mly"
        ( _2 )
# 3269 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 830 "pitparser.mly"
        ( PNil )
# 3275 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 834 "pitparser.mly"
        ( _2 )
# 3282 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 836 "pitparser.mly"
        ( PNil )
# 3288 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 840 "pitparser.mly"
    ( PPatVar(_1,None) )
# 3295 "pitparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 842 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 3303 "pitparser.ml"
               : 'basicpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basicpattern) in
    Obj.repr(
# 846 "pitparser.mly"
    ( _1 )
# 3310 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 848 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 3320 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 853 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 3328 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 855 "pitparser.mly"
    ( PPatEqual(_2) )
# 3335 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 859 "pitparser.mly"
    ( _1 :: _3 )
# 3343 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 861 "pitparser.mly"
    ( [_1] )
# 3350 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 865 "pitparser.mly"
    ( _1 )
# 3357 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 867 "pitparser.mly"
    ( [] )
# 3363 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 873 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 3371 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 875 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 3380 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 878 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 3387 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 880 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 3395 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 882 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 3403 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 884 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 3410 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 886 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 3418 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 888 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 3426 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 890 "pitparser.mly"
        ( PPRestr(_2, _3, _5, _7), parse_extent() )
# 3436 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 892 "pitparser.mly"
        ( PPRestr(_1, None, _3, _5), parse_extent() )
# 3445 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 894 "pitparser.mly"
 ( PPTest(_2,_4,None), parse_extent() )
# 3453 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 896 "pitparser.mly"
 ( PPTest(_2,_4,Some _6), parse_extent() )
# 3462 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 898 "pitparser.mly"
 ( PPLet(_2,_4,_6,None), parse_extent() )
# 3471 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 900 "pitparser.mly"
 ( PPLet(_2,_4,_6,Some _8), parse_extent() )
# 3481 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'basicpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 902 "pitparser.mly"
        ( PPLet(_1,_3,_5,None), parse_extent() )
# 3490 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 904 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,None), parse_extent() )
# 3499 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 906 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )
# 3509 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'newarg) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 908 "pitparser.mly"
        ( PPEvent(_2, _4, _6, _8), parse_extent() )
# 3519 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 910 "pitparser.mly"
        ( PPEvent(_2, [], _3, _5), parse_extent() )
# 3528 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ptermseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 912 "pitparser.mly"
        ( PPInsert(_2,_4,_7), parse_extent() )
# 3537 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 914 "pitparser.mly"
        ( PPGet(_2,_4,Some _7,_9,None), parse_extent() )
# 3547 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 916 "pitparser.mly"
        ( PPGet(_2,_4,None,_7,None), parse_extent() )
# 3556 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 918 "pitparser.mly"
        ( PPGet(_2,_4,Some _7,_9,Some _11), parse_extent() )
# 3567 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 920 "pitparser.mly"
        ( PPGet(_2,_4,None,_7,Some _9), parse_extent() )
# 3577 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 922 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 3587 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 929 "pitparser.mly"
 ( _1 :: _3 )
# 3595 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 931 "pitparser.mly"
 ( [_1] )
# 3602 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 935 "pitparser.mly"
        ( _1 )
# 3609 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 937 "pitparser.mly"
        ( [] )
# 3615 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 943 "pitparser.mly"
    ( _1 )
# 3622 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 945 "pitparser.mly"
    ( _1 )
# 3629 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 949 "pitparser.mly"
    ( [_1;_3] )
# 3637 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 951 "pitparser.mly"
    ( _1 :: _3 )
# 3645 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    Obj.repr(
# 955 "pitparser.mly"
    ( [] )
# 3651 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 957 "pitparser.mly"
    ( [_1] )
# 3658 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'onepermut) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list list) in
    Obj.repr(
# 959 "pitparser.mly"
    ( _1 :: _3 )
# 3666 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list) in
    Obj.repr(
# 967 "pitparser.mly"
    ( _1 :: _3 )
# 3674 "pitparser.ml"
               : Pitptree.ident list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 969 "pitparser.mly"
    ( [_1] )
# 3681 "pitparser.ml"
               : Pitptree.ident list))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry permut *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry order *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry term *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
let permut (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Pitptree.ident list list)
let order (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Pitptree.ident list)
let term (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Pitptree.term_e)
